{"version":3,"file":"buildingData.js","sources":["utils/buildingData.js"],"sourcesContent":["/**\r\n * 小区静态数据生成器\r\n * 根据配置生成固定的建筑、单元、楼层数据\r\n */\r\n\r\n// 简化的建筑配置\r\nconst FLAT_BUILDINGS = [\r\n\t[1, [], 17, 0],\r\n\t[5, [], 16, 0],\r\n\t[2, [37, 36], 17, 1],\r\n\t[3, [24, 23], 17, 2],\r\n\t[4, [9, 8],17, 3],\r\n\t[6, [], 16, 0],\r\n\t[10, [], 17, 0],\r\n\t[9, [35, 34], 17, 1],\r\n\t[8, [22, 21], 16, 2],\r\n\t[7, [7, 6], 17, 3]\r\n]\r\n\r\nconst VILLA_BUILDINGS = [\r\n\t[11, [], 0],\r\n\t[12, [], 1],\r\n\t[13, [], 2],\r\n    [14, [28, 27], 3],\r\n\t[15, [20, 19], 4],\r\n\t[16, [14, 13], 5],\r\n\t[17, [5, 4], 6],\r\n\t[24, [], 0],\r\n\t[23, [], 1],\r\n\t[22, [], 2],\r\n\t[21, [26, 25], 3],\r\n\t[20, [18, 17], 4],\r\n\t[19, [12, 11, 10], 5],\r\n\t[18, [3, 2, 1], 6]\r\n]\r\n\r\n/**\r\n * 生成建筑列表\r\n * @returns {Array} 建筑数组\r\n */\r\nexport function generateBuildings() {\r\n    const flatBuildings = FLAT_BUILDINGS.map(([building, units, maxFloor, row]) => ({\r\n        building,\r\n        name: `${building}栋`,\r\n        type: 'flat',\r\n        unitCount: units.length,\r\n        maxFloor,\r\n        doorsPerUnit: 2,\r\n        row,\r\n        isOpen: units.length > 0, // 根据单元数组长度判断是否开放\r\n        floors: Array.from({ length: maxFloor }, (_, i) => i + 1),\r\n        units: generateFlatUnits(building, units, maxFloor)\r\n    }))\r\n\r\n    const villaBuildings = VILLA_BUILDINGS.map(([building, units, row]) => ({\r\n        building,\r\n        name: `${building}栋别墅区`,\r\n        type: 'villa',\r\n        unitCount: units.length,\r\n        maxFloor: 3,\r\n        doorsPerUnit: 1,\r\n        row,\r\n        isOpen: units.length > 0, // 根据单元数组长度判断是否开放\r\n        floors: [1, 3, 5],\r\n        units: generateVillaUnits(building, units)\r\n    }))\r\n\r\n    return [...flatBuildings, ...villaBuildings]\r\n}\r\n\r\n/**\r\n * 获取已开放的楼栋列表\r\n * @returns {Array} 已开放的楼栋数组\r\n */\r\nexport function getOpenBuildings() {\r\n    return generateBuildings().filter(building => building.isOpen)\r\n}\r\n\r\n/**\r\n * 获取所有楼栋（包括未开放的，用于可视化显示）\r\n * @returns {Array} 所有楼栋数组\r\n */\r\nexport function getAllBuildingsForVisualization() {\r\n    return generateBuildings()\r\n}\r\n\r\n/**\r\n * 按排数分组获取楼栋\r\n * @param {number} row 排数\r\n * @returns {Array} 该排的楼栋数组\r\n */\r\nexport function getBuildingsByRow(row) {\r\n    return generateBuildings().filter(building => building.row === row)\r\n}\r\n\r\n/**\r\n * 获取所有排数\r\n * @returns {Array} 排数数组\r\n */\r\nexport function getAllRows() {\r\n    const buildings = generateBuildings()\r\n    const rows = new Set(buildings.map(b => b.row))\r\n    return Array.from(rows).sort((a, b) => a - b)\r\n}\r\n\r\n/**\r\n * 获取最大排数\r\n * @returns {number} 最大排数\r\n */\r\nexport function getMaxRow() {\r\n    const buildings = generateBuildings()\r\n    return Math.max(...buildings.map(b => b.row))\r\n}\r\n\r\n/**\r\n * 生成平层建筑的单元列表\r\n * @param {number} building 建筑编号\r\n * @param {Array} units 单元号数组\r\n * @param {number} maxFloor 最高楼层\r\n * @returns {Array} 单元数组\r\n */\r\nfunction generateFlatUnits(building, units, maxFloor) {\r\n    return units.map(unitNum => {\r\n        const unitDoors = []\r\n        for (let floor = 1; floor <= maxFloor; floor++) {\r\n            for (let door = 1; door <= 2; door++) {\r\n                unitDoors.push({\r\n                    building,\r\n                    unit: unitNum,\r\n                    floor,\r\n                    door,\r\n                    name: `${floor}${door === 1 ? '01' : '02'}`,\r\n                    fullName: `${building}栋${floor}层${unitNum}单元${door}号`\r\n                })\r\n            }\r\n        }\r\n\r\n        return {\r\n            building,\r\n            unit: unitNum,\r\n            name: `${unitNum}单元`,\r\n            type: 'flat',\r\n            floors: Array.from({ length: maxFloor }, (_, i) => i + 1),\r\n            doors: unitDoors\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * 生成别墅建筑的单元列表\r\n * @param {number} building 建筑编号\r\n * @param {Array} units 单元号数组\r\n * @returns {Array} 单元数组\r\n */\r\nfunction generateVillaUnits(building, units) {\r\n    return units.map(unitNum => ({\r\n        building,\r\n        unit: unitNum,\r\n        name: `${unitNum}单元`,\r\n        type: 'villa',\r\n        floors: [1, 3, 5],\r\n        doors: [1, 3, 5].map(floor => ({\r\n            building,\r\n            unit: unitNum,\r\n            floor,\r\n            door: 1,\r\n            name: `${floor}层${unitNum}号别墅`,\r\n            fullName: `${building}栋别墅区${floor}层${unitNum}号别墅`\r\n        }))\r\n    }))\r\n}\r\n\r\n/**\r\n * 获取所有单元列表\r\n * @returns {Array} 所有单元数组\r\n */\r\nexport function getAllUnits() {\r\n    const buildings = generateBuildings()\r\n    const allUnits = []\r\n\r\n    buildings.forEach(building => {\r\n        allUnits.push(...building.units)\r\n    })\r\n\r\n    return allUnits\r\n}\r\n\r\n/**\r\n * 获取所有门牌列表\r\n * @returns {Array} 所有门牌数组\r\n */\r\nexport function getAllDoors() {\r\n    const units = getAllUnits()\r\n    const allDoors = []\r\n\r\n    units.forEach(unit => {\r\n        allDoors.push(...unit.doors)\r\n    })\r\n\r\n    return allDoors\r\n}\r\n\r\n/**\r\n * 根据建筑编号获取建筑信息\r\n * @param {number} buildingNumber 建筑编号\r\n * @returns {Object|null} 建筑信息\r\n */\r\nexport function getBuildingByNumber(buildingNumber) {\r\n    const buildings = generateBuildings()\r\n    return buildings.find(b => b.building === buildingNumber) || null\r\n}\r\n\r\n/**\r\n * 根据建筑编号获取单元列表\r\n * @param {number} buildingNumber 建筑编号\r\n * @returns {Array} 单元数组\r\n */\r\nexport function getUnitsByBuilding(buildingNumber) {\r\n    const building = getBuildingByNumber(buildingNumber)\r\n    return building ? building.units : []\r\n}\r\n\r\n/**\r\n * 根据建筑和单元获取门牌列表\r\n * @param {number} buildingNumber 建筑编号\r\n * @param {number} unitNumber 单元编号\r\n * @returns {Array} 门牌数组\r\n */\r\nexport function getDoorsByUnit(buildingNumber, unitNumber) {\r\n    const building = getBuildingByNumber(buildingNumber)\r\n    if (!building) return []\r\n\r\n    const unit = building.units.find(u => u.unit === unitNumber)\r\n    return unit ? unit.doors : []\r\n}\r\n\r\n/**\r\n * 获取指定位置的详细信息\r\n * @param {number} building 建筑编号\r\n * @param {number} unit 单元编号\r\n * @param {number} floor 楼层\r\n * @param {number} door 门牌号\r\n * @returns {Object|null} 位置信息\r\n */\r\nexport function getLocationInfo(building, unit, floor, door) {\r\n    const doors = getAllDoors()\r\n    return doors.find(d =>\r\n        d.building === building &&\r\n        d.unit === unit &&\r\n        d.floor === floor &&\r\n        d.door === door\r\n    ) || null\r\n}\r\n\r\n/**\r\n * 计算建筑总户数\r\n * @param {number} buildingNumber 建筑编号\r\n * @returns {number} 总户数\r\n */\r\nexport function calculateBuildingCapacity(buildingNumber) {\r\n    const building = getBuildingByNumber(buildingNumber)\r\n    if (!building) return 0\r\n\r\n    // 直接统计所有门牌数量\r\n    let totalDoors = 0\r\n    building.units.forEach(unit => {\r\n        totalDoors += unit.doors.length\r\n    })\r\n    return totalDoors\r\n}\r\n\r\n/**\r\n * 计算小区总容量\r\n * @returns {Object} 统计信息\r\n */\r\nexport function getCommunityStats() {\r\n    const buildings = generateBuildings()\r\n    const allDoors = getAllDoors()\r\n\r\n    return {\r\n        totalBuildings: buildings.length,\r\n        totalUnits: getAllUnits().length,\r\n        totalDoors: allDoors.length,\r\n        flatBuildings: buildings.filter(b => b.type === 'flat').length,\r\n        villaBuildings: buildings.filter(b => b.type === 'villa').length\r\n    }\r\n}\r\n\r\n/**\r\n * 生成建筑选择器数据（用于下拉选择）\r\n * @returns {Array} 选择器数组\r\n */\r\nexport function generateBuildingOptions() {\r\n    const buildings = generateBuildings()\r\n    return buildings.map(b => ({\r\n        label: b.name,\r\n        value: b.building,\r\n        type: b.type\r\n    }))\r\n}\r\n\r\n/**\r\n * 生成单元选择器数据\r\n * @param {number} buildingNumber 建筑编号\r\n * @returns {Array} 选择器数组\r\n */\r\nexport function generateUnitOptions(buildingNumber) {\r\n    const units = getUnitsByBuilding(buildingNumber)\r\n    return units.map(u => ({\r\n        label: u.name,\r\n        value: u.unit\r\n    }))\r\n}\r\n\r\n/**\r\n * 生成楼层选择器数据\r\n * @param {number} buildingNumber 建筑编号\r\n * @returns {Array} 选择器数组\r\n */\r\nexport function generateFloorOptions(buildingNumber) {\r\n    const building = getBuildingByNumber(buildingNumber)\r\n    if (!building) return []\r\n\r\n    return building.floors.map(floor => ({\r\n        label: `${floor}层`,\r\n        value: floor\r\n    }))\r\n}\r\n\r\n/**\r\n * 生成门牌选择器数据\r\n * @param {number} buildingNumber 建筑编号\r\n * @param {number} unitNumber 单元编号\r\n * @param {number} floor 楼层\r\n * @returns {Array} 选择器数组\r\n */\r\nexport function generateDoorOptions(buildingNumber, unitNumber, floor) {\r\n    const doors = getDoorsByUnit(buildingNumber, unitNumber)\r\n    const floorDoors = doors.filter(d => d.floor === floor)\r\n\r\n    return floorDoors.map(d => ({\r\n        label: `${d.door}号`,\r\n        value: d.door,\r\n        name: d.name\r\n    }))\r\n}"],"names":[],"mappings":"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"}