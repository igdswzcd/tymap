<template>
  <view v-if="visible" class="modal-overlay">
    <view class="modal-content">
      <view class="avatar-section">
        <button
          class="avatar-wrapper"
          open-type="chooseAvatar"
        >
         <image class="avatar" :src="userInfo.avatar || 'https://mmbiz.qpic.cn/mmbiz/icTdbqWNOwNRna42FI242Lcia07jQodd2FJGIYQfG0LAJGFxM4FbnQP6yfMxBgJ0F3YRqJCJ1aPAK2dQagdusBZg/0'"></image>
		</button>
	  </view>
      <view class="nickname-section">
        <input
          type="nickname"
          class="nickname-input"
          v-model="userInfo.nickname"
          placeholder="使用微信昵称更方便"
        />
      </view>
      <view class="modal-buttons">
        <button class="cancel-btn" @tap="onCancel">取消</button>
        <button class="confirm-btn" @tap="onConfirm">确认</button>
      </view>
    </view>
  </view>
</template>

<script setup lang="uts">
import { ref, reactive, watch } from 'vue'

// Props
const props = defineProps({
  visible: {
    type: Boolean,
    default: false
  },
  buildingNumber: {
    type: Number,
    required: true
  },
  unitNumber: {
    type: Number,
    required: true
  },
  floorNumber: {
    type: Number,
    required: true
  },
  doorNumber: {
    type: Number,
    required: true
  },
  isOccupied: {
    type: Boolean,
    default: false
  },
  existingResident: {
    type: Object,
    default: null
  }
})

// Emits
const emit = defineEmits(['close', 'confirm'])

// 用户信息
const userInfo = reactive({
  avatar: '',
  nickname: ''
})

// 监听器
watch(() => props.visible, (newVal) => {
  if (newVal) {
    // 从本地存储恢复之前的信息
    try {
      userInfo.avatar = uni.getStorageSync('userAvatar') || ''
      userInfo.nickname = uni.getStorageSync('userNickname') || ''
    } catch (e) {
      console.error('读取用户信息失败:', e)
    }
  }
})

const onNicknameInput = (e: any) => {
  userInfo.nickname = e.detail.value
}

const onCancel = () => {
  emit('close')
}

const onConfirm = () => {
  if (!userInfo.nickname) {
    uni.showToast({
      title: '请输入昵称',
      icon: 'none'
    })
    return
  }

  // 保存用户信息到本地存储
  try {
    uni.setStorageSync('userAvatar', userInfo.avatar)
    uni.setStorageSync('userNickname', userInfo.nickname)
  } catch (e) {
    console.error('保存用户信息失败:', e)
  }

  const doorCode = `${props.floorNumber}${props.doorNumber === 1 ? '01' : '02'}`
  const message = props.isOccupied
    ? `申请更换到${doorCode}，等待审核`
    : `申请入住${doorCode}，等待审核`

  emit('confirm', {
    avatar: userInfo.avatar,
    nickname: userInfo.nickname,
    message: message
  })
}

// 暴露方法给父组件
defineExpose({
  userInfo
})
</script>

<style>
.modal-overlay {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background-color: rgba(0, 0, 0, 0.5);
	display: flex;
	justify-content: center;
	align-items: center;
	z-index: 9999;
}

.modal-content {
	background-color: #fff;
	border-radius: 20rpx;
	padding: 60rpx;
	width: 600rpx;
}

.avatar-section {
	display: flex;
	justify-content: center;
	margin-bottom: 40rpx;
}

.avatar-wrapper {
	width: 160rpx;
	height: 160rpx;
	border-radius: 50%;
	border: 2rpx solid #eee;
}
.avatar {
  width: 100%;
  height: 100%;
  border-radius: 50%;
}

.nickname-section {
	margin-bottom: 40rpx;
}

.nickname-input {
	width: 100%;
	height: 80rpx;
	border: 1rpx solid #ddd;
	border-radius: 10rpx;
	padding: 0 20rpx;
	font-size: 32rpx;
}

.modal-buttons {
	display: flex;
	justify-content: space-between;
	gap: 30rpx;
}

.cancel-btn,
.confirm-btn {
	flex: 1;
	height: 80rpx;
	border: none;
	border-radius: 10rpx;
	font-size: 32rpx;
}

.cancel-btn {
	background-color: #f5f5f5;
	color: #333;
}

.confirm-btn {
	background-color: #007aff;
	color: #fff;
}
</style>