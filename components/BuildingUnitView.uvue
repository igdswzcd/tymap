<template>
  <view class="building-unit-view">
    <!-- 主要内容区域 -->
    <view class="content">

      <!-- 单元网格 -->
      <view class="units-container" :class="getUnitsContainerClass()">
        <view
          v-for="(unit, index) in units"
          :key="unit.unit"
          class="unit-item"
          :class="getUnitItemClass(index)"
          @tap="onUnitTap(unit)"
        >
          <UnitDice3D
            :disabled="!unit.isOpen"
            :unitNumber="unit.unit"
          />
        </view>
      </view>
    </view>
  </view>
</template>

<script setup lang="uts">
import { ref, onMounted } from 'vue'
import UnitDice3D from '@/components/UnitDice3D.uvue'
import dataManager from '@/utils/dataManager.js'
import buildingManager from '@/utils/buildingManager.js'

// Props
const props = defineProps({
  buildingNumber: {
    type: [Number, String],
    required: true
  }
})

// Emits
const emit = defineEmits(['close', 'unitTap'])

// 响应式数据
const units = ref<any[]>([]) // 单元数据

// 计算容器样式
const getUnitsContainerClass = () => {
  const unitCount = units.value.length
  const hasVillaUnits = props.buildingNumber > 10

  let classes = []
  if (unitCount === 2) {
    classes.push('units-2')
  } else if (unitCount === 3) {
    classes.push('units-3')
  }

  if (hasVillaUnits) {
    classes.push('has-villa-units')
  }

  return classes.join(' ')
}

// 计算单元项样式
const getUnitItemClass = (index: number) => {
  const unitCount = units.value.length
  if (unitCount === 3) {
    return `unit-item-${index}`
  }
  return ''
}


// 获取楼栋单元数据（总函数）
const loadBuildingUnits = async () => {
  try {
    // 获取楼栋信息
    const buildingInfo = await buildingManager.getBuilding(props.buildingNumber)

    if (!buildingInfo || !buildingInfo.units || buildingInfo.units.length === 0) {
      units.value = []
      return
    }

    // 创建基础单元数据
    const unitsData = buildingInfo.units.map(unitNumber => ({
      unit: unitNumber,
      isOpen: true
    }))

    units.value = unitsData
  } catch (error) {
    console.error('加载楼栋单元数据失败:', error)
    units.value = []
  }
}

// 单元点击事件
const onUnitTap = (unit: any) => {
  console.log('点击单元:', unit)
  emit('unitTap', unit)
}

// 关闭视图
const handleClose = () => {
  emit('close')
}

// 生命周期
onMounted(async () => {
  await loadBuildingUnits()
})
</script>

<style>
.building-unit-view {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: #f0f0f0;
  z-index: 100;
}

.content {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
}

.building-title {
  font-size: 72rpx;
  font-weight: bold;
  text-shadow: 0 2rpx 4rpx rgba(0, 0, 0, 0.2);
}

.back-btn {
  width: 60rpx;
  height: 60rpx;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.2);
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.back-btn:active {
  transform: scale(0.95);
  background: rgba(255, 255, 255, 0.3);
}

.back-icon {
  font-size: 32rpx;
  color: white;
  font-weight: bold;
}

.units-container {
  flex: 1;
  padding: 20rpx;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  gap: 20rpx;
  align-content: flex-start;
}

/* 别墅单元样式 - 占60%高度并居中 */
.units-container.has-villa-units {
  height: 40%;
  margin-top: 20%;
  margin-bottom: 20%;
}

/* 2个单元布局 - 平分左右空间 */
.units-container.units-2 {
  justify-content: space-between;
  align-items: center;
}

.units-container.units-2 .unit-item {
  width: 45%;
  height: 80%;
}

/* 3个单元布局 - 上中下三份，50%宽度，阶梯margin */
.units-container.units-3 {
  flex-direction: column;
  justify-content: space-around;
  align-items: center;
}

.units-container.units-3 .unit-item {
  width: 50%;
  height: 30%;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* 阶梯margin */
.units-container.units-3 .unit-item-0 {
  margin-left: 0%;
}

.units-container.units-3 .unit-item-1 {
  margin-left: 20%;
}

.units-container.units-3 .unit-item-2 {
  margin-left: 40%;
}

/* 默认单元样式 */
.unit-item {
  width: calc(33.33% - 14rpx);
  height: 200rpx;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: transform 0.2s ease;
}

.unit-item:active {
  transform: scale(0.95);
}

/* 加载状态 */
.loading {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 60rpx;
  color: #6c757d;
  font-size: 28rpx;
}

/* 调试信息 */
.debug-info {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 60rpx;
  color: #dc3545;
  font-size: 28rpx;
  text-align: center;
  background: rgba(220, 53, 69, 0.1);
  border-radius: 16rpx;
  margin: 20rpx;
}

.debug-info text {
  margin: 8rpx 0;
}

/* 空状态 */
.empty {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 60rpx;
  color: #6c757d;
  font-size: 28rpx;
  text-align: center;
}
</style>