<template>
	<view class="building-view">
		<view
			class="visualization-area"
			@touchstart="handleTouchStart"
			@touchend="handleTouchEnd"
		>
			<view
				class="areas-container"
				:style="{ transform: `translateX(${currentArea === 'flat' ? '0' : '-50%'})` }"
			>
				<!-- 平层区 -->
				<view
					class="area-content flat-area"
					:class="{ 'secondary-area': currentArea === 'villa' }"
				>
					<view
						v-for="row in flatRows"
						:key="row.number"
						class="row-container"
					>
						<view
							v-for="building in row.buildings"
							:key="building.building"
							class="building-block flat-building"
							@tap="onBuildingTap(building)"
						>
							<Dice3D
								:disabled="!building.isOpen"
								:buildingNumber="building.building"
							/>
						</view>
					</view>
				</view>

				<!-- 中间的箭头 -->
				<view
					class="area-switch-wrapper"
					:class="{ 'left-position': currentArea === 'villa' }"
				>
					<view
						class="area-switch"
						:class="{
							'point-right': currentArea === 'villa',
							'animating': isAnimating
						}"
						@tap="switchArea"
					>
						<text class="switch-arrow">➜</text>
					</view>
				</view>
				<!-- 向下箭头 -->
				<view
					class="area-switch-wrapper down-switch-wrapper"
					:class="{ 'left-position': currentArea === 'villa' }"
					@tap="switchUnder"
				>
					<view
						class="area-switch down-switch"
						:class="{ 'animating': isAnimating }"
					>
						<text class="switch-arrow down-arrow-icon">➜</text>
					</view>
				</view>

				<!-- 别墅区 -->
				<view
					class="area-content villa-area"
					:class="{ 'secondary-area': currentArea === 'flat' }"
				>
					<view
						v-for="row in villaRows"
						:key="row.number"
						class="row-container"
					>
						<view
							v-for="building in row.buildings"
							:key="building.building"
							class="building-block villa-building"
							@tap="onBuildingTap(building)"
						>
							<Dice3D
								:disabled="!building.isOpen"
								:buildingNumber="building.building"
							/>
						</view>
					</view>
				</view>
			</view>
		</view>

		<!-- 单元视图组件 -->
		<BuildingUnitView
			v-if="shouldShowUnitView"
			:buildingNumber="storeState.selectedBuilding"
			@close="handleUnitViewClose"
			@unitTap="onUnitTap"
		/>
	</view>
</template>

<script setup lang="uts">
import { ref, reactive, onMounted, computed, watch } from 'vue'
import buildingManager from '@/utils/buildingManager.js'
import dataManager from '@/utils/dataManager.js'
import Dice3D from '@/components/Dice3D.uvue'
import BuildingUnitView from '@/components/BuildingUnitView.uvue'
import { insertMultipleTestResidents } from '@/utils/mockData.uts'
import checkinStore from '@/store/index.uts'

// 定义事件
const emit = defineEmits(['buildingTap'])

// 状态管理
const currentArea = ref<'flat' | 'villa'>('flat')
const touchStartX = ref(0)
const touchStartTime = ref(0)
const isAnimating = ref(false)
const unitViewVisible = ref(false)
const selectedBuilding = ref<any>(null)
const allBuildings = ref<any[]>([])
const flatBuildings = ref<any[]>([])
const villaBuildings = ref<any[]>([])

// 监听store状态
const storeState = checkinStore.getReactiveState()

// 根据store状态计算是否应该显示单元视图
const shouldShowUnitView = computed(() => {
	return storeState.step === 'selecting_unit' && storeState.selectedBuilding !== null
})

// 根据store状态同步选中的楼栋
const syncSelectedBuilding = () => {
	if (storeState.selectedBuilding && !selectedBuilding.value) {
		// 从楼栋列表中找到对应的楼栋
		const building = allBuildings.value.find(b => b.building === storeState.selectedBuilding)
		if (building) {
			selectedBuilding.value = building
			unitViewVisible.value = true
		}
	} else if (!storeState.selectedBuilding && selectedBuilding.value) {
		// 如果store中没有选中的楼栋，清空本地选择
		selectedBuilding.value = null
		unitViewVisible.value = false
	}
}

// 计算行数据
const flatRows = computed(() => {
	const rows: Array<{ number: number; buildings: any[] }> = []
	const maxRow = Math.max(...flatBuildings.value.map(b => b.row))

	for (let i = 0; i <= maxRow; i++) {
		const rowBuildings = flatBuildings.value.filter(b => b.row === i)
		if (rowBuildings.length > 0) {
			rows.push({
				number: i,
				buildings: rowBuildings.sort((a, b) => a.building - b.building)
			})
		}
	}
	return rows
})

const villaRows = computed(() => {
	const rows: Array<{ number: number; buildings: any[] }> = []
	const maxRow = Math.max(...villaBuildings.value.map(b => b.row))

	for (let i = 0; i <= maxRow; i++) {
		const rowBuildings = villaBuildings.value.filter(b => b.row === i)
		if (rowBuildings.length > 0) {
			rows.push({
				number: i,
				buildings: rowBuildings.sort((a, b) => a.building - b.building)
			})
		}
	}
	return rows
})

// 加载楼栋数据
const loadBuildingData = async () => {
	try {
		const buildings = await buildingManager.getAllBuildings()
		allBuildings.value = buildings
		flatBuildings.value = buildings.filter(b => b.type === 'flat')
		villaBuildings.value = buildings.filter(b => b.type === 'villa')
		console.log('楼栋数据加载完成')
	} catch (error) {
		console.error('加载楼栋数据失败:', error)
	}
}

// 触摸事件处理
const handleTouchStart = (e: any) => {
	if (e.touches && e.touches[0]) {
		touchStartX.value = e.touches[0].clientX
		touchStartTime.value = Date.now()
	}
}

const handleTouchEnd = (e: any) => {
	const touchEndTime = Date.now()
	const touchDuration = touchEndTime - touchStartTime.value

	// 检查changedTouches是否存在
	if (e.changedTouches && e.changedTouches[0]) {
		const touchEndX = e.changedTouches[0].clientX
		const deltaX = touchEndX - touchStartX.value

		// 判断滑动方向和距离
		if (Math.abs(deltaX) > 50 && touchDuration < 500) {
			if (deltaX > 0 && currentArea.value === 'villa') {
				// 向右滑动，切换到平层区
				currentArea.value = 'flat'
			} else if (deltaX < 0 && currentArea.value === 'flat') {
				// 向左滑动，切换到别墅区
				currentArea.value = 'villa'
			}
		}
	}
}

// 楼栋点击事件
const onBuildingTap = (building: any) => {
	console.log('点击楼栋:', building)
	emit('buildingTap', building)

	if (!building.isOpen) {
		uni.showToast({
			title: `${building.building}# (未开放)`,
			icon: 'none'
		})
		return
	}

	// 使用全局状态管理进入单元选择
	checkinStore.enterUnitSelection(building.building)

	console.log('已进入单元选择状态，楼栋:', building.building)
}

// 切换区域
const switchArea = () => {
	isAnimating.value = true
	currentArea.value = currentArea.value === 'flat' ? 'villa' : 'flat'

	// 动画结束后重置状态
	setTimeout(() => {
		isAnimating.value = false
	}, 1000)
}

const switchUnder = () => {
	console.log('nonono')
}

// 防止重复初始化的标志
let isTestDataInitialized = false

// 初始化测试数据
const initializeTestData = async () => {
	// 防止重复初始化
	if (isTestDataInitialized) {
		console.log('测试数据已经初始化过，跳过重复初始化')
		return
	}

	try {
		console.log('开始初始化测试数据...')
		// 先尝试插入测试数据（insertMultipleTestResidents 函数内部已包含清空操作）
		const insertResult = await insertMultipleTestResidents()

		// 检查是否跳过了数据生成
		if (insertResult && insertResult.skipped) {
			console.log('测试数据生成已跳过:', insertResult.reason)
			// 即使跳过也要刷新缓存，确保显示最新数据
			await dataManager.refreshData()
			return
		}

		console.log('测试数据初始化成功，插入结果:', insertResult)

		// 等待一下确保数据库操作完成
		await new Promise(resolve => setTimeout(resolve, 500))

		// 刷新dataManager缓存
		console.log('开始刷新dataManager缓存...')
		await dataManager.refreshData()
		console.log('dataManager缓存刷新完成')

		// 标记为已初始化
		isTestDataInitialized = true
	} catch (error) {
		// 如果插入失败（可能数据已存在），继续执行
		console.log('测试数据初始化跳过:', (error as any).message)
	}
}


// 单元视图关闭事件
const handleUnitViewClose = () => {
	// 使用全局状态管理返回上级
	checkinStore.goBack()
}

// 单元点击事件
const onUnitTap = (unit: any) => {
	console.log('点击单元:', unit)

	// 使用全局状态管理选择单元
	checkinStore.selectUnit(unit.unit)

	// TODO: 处理单元选择逻辑，可以进一步显示楼层和门
}

// 对外暴露的方法
defineExpose({
	loadBuildingData,
	initializeTestData
})

// 监听store状态变化
watch(storeState, (newState, oldState) => {
	console.log('Store状态变化:', newState)

	// 同步选中的楼栋
	if (newState.step === 'selecting_unit' && newState.selectedBuilding !== oldState.selectedBuilding) {
		syncSelectedBuilding()
	}

	// 如果状态不再是selecting_unit，隐藏单元视图
	if (newState.step !== 'selecting_unit') {
		unitViewVisible.value = false
		selectedBuilding.value = null
	}
}, { deep: true })

// 生命周期
onMounted(async () => {
	// 初始化测试数据
	await initializeTestData()
	// 初始化building管理器（加载building数据到内存）
	console.log('初始化building管理器...')
	await buildingManager.init()
	// 加载楼栋数据
	await loadBuildingData()

	// 初始同步store状态
	syncSelectedBuilding()
})
</script>

<style>
.building-view {
	width: 100%;
	height: 100%;
	position: relative;
}

.visualization-area {
	width: 100%;
	height: 100%;
	overflow: hidden;
	position: relative;
}

.areas-container {
	width: 200%;
	height: 100%;
	display: flex;
	flex-direction: row;
	transition: transform 1s cubic-bezier(0.4, 0, 0.6, 1);
	will-change: transform;
}

.area-content {
	height: 100%;
	width: 50%;
	display: flex;
	gap: 10rpx;
	flex-direction: column;
	justify-content: space-between;
	padding: 20rpx;
	box-sizing: border-box;
	transition: width 1s cubic-bezier(0.4, 0, 0.6, 1), opacity 1s cubic-bezier(0.4, 0, 0.6, 1);
}

.flat-area {
	padding-right: 2.5%;
}

.villa-area {
	/* 别墅区样式 */
	padding-left: 2.5%;
}

.secondary-area {
	opacity: 0.2;
}

.row-container {
	display: flex;
	flex-direction: row;
	justify-content: space-between;
	width: 100%;
	flex: 1;
	gap: 10rpx;
}

.building-block {
	display: flex;
	align-items: center;
	justify-content: center;
	border-radius: 8rpx;
	transition: all 0.3s ease;
	flex: 1;
	max-width: 40vw;
}

.flat-building, villa-building {
	flex: 1;
}

.building-block:active {
	transform: scale(0.95);
}

.area-switch-wrapper {
	height: 100rpx;
	left: calc(50% - 75rpx);
	display: flex;
	align-items: center;
	justify-content: center;
	position: absolute;
	top: calc(50% - 75rpx);
	z-index: 10;
	transition: left 1s cubic-bezier(0.4, 0, 0.6, 1);
}

.area-switch-wrapper.left-position {
	left: calc(50% + 5rpx);
}

.area-switch {
	background: rgba(255, 255, 255, 0.9);
	width: 70rpx;
	height: 70rpx;
	border-radius: 50%;
	display: flex;
	align-items: center;
	justify-content: center;
	box-shadow: 0 2rpx 10rpx rgba(0,0,0,0.2);
	transition: all 1s cubic-bezier(0.4, 0, 0.6, 1);
}

.area-switch.point-right .switch-arrow {
	transform: rotate(180deg);
}

.area-switch.animating {
	animation: opacityPulse 1s cubic-bezier(0.4, 0, 0.6, 1);
}

.down-switch.animating {
	animation: downOpacityPulse 1s cubic-bezier(0.4, 0, 0.6, 1);
}

/* 向下箭头 - 复用原有样式 */
.down-switch-wrapper {
	top: unset;
	bottom: 10rpx;
	left: 25%;
	transform: translateX(-50%);
	opacity: 0.6;
	transition: left 1s cubic-bezier(0.4, 0, 0.6, 1);
}

.down-switch-wrapper.left-position {
	left: 75%;
}

.down-switch {
	opacity: 0.6;
}

.down-switch:active {
	transform: scale(0.95);
	opacity: 0.8;
}

.down-arrow-icon {
	transform: rotate(90deg);
	filter: grayscale(1);
}

@keyframes opacityPulse {
	0% { opacity: 1; }
	50% { opacity: 0.2; }
	100% { opacity: 1; }
}

@keyframes downOpacityPulse {
	0% { opacity: 0; }
	5% { opacity: 0; }
	95% { opacity: 0; }
	100% { opacity: 1; }
}

.switch-arrow {
	font-size: 40rpx;
	font-weight: bold;
	color: #3cc51f;
	transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
}
</style>