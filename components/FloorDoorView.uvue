<template>
  <view class="floor-door-view">
    <!-- 主要内容区域 -->
    <view class="content">
      <!-- 楼层门牌列表 -->
      <scroll-view
        class="floor-door-scroll"
        scroll-y="true"
        :show-scrollbar="false"
        :scroll-top="scrollTop"
        @scroll="onScroll"
      >
        <view class="scroll-container">
          <view
            v-for="floor in sortedFloors"
            :key="floor.floor"
            class="floor-row"
          >
            <!-- 左侧门牌 (45%) - 2号门 -->
            <view class="door-section left-section">
              <view
                v-if="floor.doors[1]"
                class="door-card"
                :class="{
                  'occupied': floor.doors[1].isOccupied,
                  'available': !floor.doors[1].isOccupied,
                  'selected': isSelected(floor.floor, floor.doors[1].door)
                }"
                @tap="onDoorTap(floor.floor, floor.doors[1])"
              >
                <view class="door-header">
                  <text class="door-id">{{ floor.floor }}{{ floor.doors[1].door === 2 ? '02' : '01' }}</text>
                  <view class="status-dot" :class="floor.doors[1].isOccupied ? 'occupied' : 'available'"></view>
                </view>
                <view v-if="floor.doors[1].isOccupied && floor.doors[1].resident" class="resident-info">
                  <text class="resident-name">{{ floor.doors[1].resident.nickname || '住户' }}</text>
                  <text v-if="floor.doors[1].resident.apply_status" class="resident-status">
                    {{ getStatusText(floor.doors[1].resident.apply_status) }}
                  </text>
                </view>
                <view v-else class="empty-status">
                  <text class="empty-text">空置</text>
                </view>
              </view>
            </view>

            <!-- 中间楼层号 (10%) -->
            <view class="floor-center">
              <text class="floor-display">{{ floor.floor }}F</text>
            </view>

            <!-- 右侧门牌 (45%) - 1号门 -->
            <view class="door-section right-section">
              <view
                v-if="floor.doors[0]"
                class="door-card"
                :class="{
                  'occupied': floor.doors[0].isOccupied,
                  'available': !floor.doors[0].isOccupied,
                  'selected': isSelected(floor.floor, floor.doors[0].door)
                }"
                @tap="onDoorTap(floor.floor, floor.doors[0])"
              >
                <view class="door-header">
                  <text class="door-id">{{ floor.floor }}{{ floor.doors[0].door === 1 ? '01' : '02' }}</text>
                  <view class="status-dot" :class="floor.doors[0].isOccupied ? 'occupied' : 'available'"></view>
                </view>
                <view v-if="floor.doors[0].isOccupied && floor.doors[0].resident" class="resident-info">
                  <text class="resident-name">{{ floor.doors[0].resident.nickname || '住户' }}</text>
                  <text v-if="floor.doors[0].resident.apply_status" class="resident-status">
                    {{ getStatusText(floor.doors[0].resident.apply_status) }}
                  </text>
                </view>
                <view v-else class="empty-status">
                  <text class="empty-text">空置</text>
                </view>
              </view>
            </view>
          </view>

          <!-- 底部占位，确保1楼可以滚动到合适位置 -->
          <view class="bottom-spacer"></view>
        </view>
      </scroll-view>

      <!-- 楼层指示器 -->
      <view class="floor-indicator">
        <text class="indicator-text">{{ currentFloor || '-' }}楼</text>
      </view>

      <!-- 门牌确认模态框 -->
      <DoorModal
        :visible="modalVisible"
        :building-number="selectedDoorInfo.buildingNumber"
        :unit-number="selectedDoorInfo.unitNumber"
        :floor-number="selectedDoorInfo.floorNumber"
        :door-number="selectedDoorInfo.doorNumber"
        :is-occupied="selectedDoorInfo.isOccupied"
        :existing-resident="selectedDoorInfo.existingResident"
        @close="onModalClose"
        @confirm="onModalConfirm"
      />
    </view>
  </view>
</template>

<script setup lang="uts">
import { ref, computed, onMounted } from 'vue'
import dataManager from '@/utils/dataManager.js'
import buildingManager from '@/utils/buildingManager.js'
import DoorModal from './DoorModal.uvue'

// Props
const props = defineProps({
  buildingNumber: {
    type: Number,
    required: true
  },
  unitNumber: {
    type: Number,
    required: true
  }
})

// Emits
const emit = defineEmits(['close', 'doorTap'])

// 响应式数据
const floors = ref<any[]>([]) // 楼层数据
const selectedFloor = ref<number | null>(null)
const selectedDoor = ref<any>(null)
const scrollTop = ref(0) // 滚动位置
const currentFloor = ref<number | null>(null) // 当前显示的楼层

// Modal相关数据
const modalVisible = ref(false) // 模态框显示状态
const selectedDoorInfo = ref({ // 选中的门牌信息
  buildingNumber: 0,
  unitNumber: 0,
  floorNumber: 0,
  doorNumber: 0,
  isOccupied: false,
  existingResident: null
})

// 计算排序后的楼层数据（反向排序，1楼在底部）
const sortedFloors = computed(() => {
  return [...floors.value].sort((a, b) => b.floor - a.floor)
})

// 排序门牌数据
const sortedDoors = (doors: any[]) => {
  return [...doors].sort((a, b) => a.door - b.door)
}

// 获取状态文字
const getStatusText = (status: string) => {
  const statusMap: Record<string, string> = {
    'trusted': '已认证',
    'verifying': '审核中',
    'rejected': '已拒绝'
  }
  return statusMap[status] || status
}

// 检查是否选中
const isSelected = (floor: number, door: any) => {
  return selectedFloor.value === floor && selectedDoor.value?.door === door.door
}

// 滚动事件处理
const onScroll = (e: any) => {
  const scrollTop = e.detail.scrollTop
  const itemHeight = 120 // 每个楼层行的高度
  const floorIndex = Math.floor(scrollTop / itemHeight)

  if (floorIndex >= 0 && floorIndex < sortedFloors.value.length) {
    currentFloor.value = sortedFloors.value[floorIndex].floor
  }
}

// 滚动到底部（显示1楼）
const scrollToBottom = () => {
  if (floors.value.length > 0) {
    // 计算滚动位置，滚动到最底部（1楼位置）
    const itemHeight = 120
    const totalHeight = floors.value.length * itemHeight
    const viewportHeight = 600 // 假设视口高度
    scrollTop.value = Math.max(0, totalHeight - viewportHeight + 100)
  }
}

// 获取住户显示文字
const getResidentText = (resident: any) => {
  if (!resident || !resident.nickname) return '已入住'
  return resident.nickname
}

// 获取楼栋单元楼层门牌数据
const loadFloorDoorData = async () => {
  try {
    console.log('加载楼层门牌数据:', props.buildingNumber, props.unitNumber)

    // 获取该楼栋的所有楼层信息
    const allFloors = await buildingManager.getFloors(props.buildingNumber)

    // 获取该楼栋单元的所有住户数据
    const residents = await dataManager.getResidentsByBuildingUnit(
      props.buildingNumber,
      props.unitNumber
    )

    // 创建住户映射，便于快速查找
    const residentMap = new Map()
    residents.forEach(resident => {
      const key = `${resident.floor}_${resident.door}`
      residentMap.set(key, resident)
    })

    // 为所有楼层创建门牌数据
    const floorData = allFloors.map(floor => {
      const doors: any[] = []

      // 每层固定2个门（1号、2号）
      for (let door = 1; door <= 2; door++) {
        const key = `${floor}_${door}`
        const resident = residentMap.get(key)

        doors.push({
          door: door,
          isOccupied: !!resident,
          resident: resident
        })
      }

      return {
        floor: floor,
        doors: doors
      }
    })

    floors.value = floorData
    console.log('楼层门牌数据加载完成:', floors.value)

  } catch (error) {
    console.error('加载楼层门牌数据失败:', error)
    floors.value = []
  }
}

// 门牌点击事件
const onDoorTap = async (floor: number, door: any) => {
  console.log('点击门牌:', floor, door)

  selectedFloor.value = floor
  selectedDoor.value = door

  // 设置选中的门牌信息
  selectedDoorInfo.value = {
    buildingNumber: props.buildingNumber,
    unitNumber: props.unitNumber,
    floorNumber: floor,
    doorNumber: door.door,
    isOccupied: door.isOccupied,
    existingResident: door.resident || null
  }

  // 打开Modal
  modalVisible.value = true

  // 仍然发送事件供父组件使用
  emit('doorTap', {
    floor: floor,
    door: door.door,
    isOccupied: door.isOccupied,
    resident: door.resident
  })
}

// Modal关闭事件
const onModalClose = () => {
  modalVisible.value = false
  // 重置选中信息
  selectedDoorInfo.value = {
    buildingNumber: 0,
    unitNumber: 0,
    floorNumber: 0,
    doorNumber: 0,
    isOccupied: false,
    existingResident: null
  }
}

// Modal确认事件
const onModalConfirm = async (result: any) => {
  console.log('Modal确认:', result)

  try {
    // 关闭Modal
    modalVisible.value = false

    // 显示成功提示
    uni.showToast({
      title: result.message,
      icon: 'success',
      duration: 2000
    })

    // 刷新楼层数据
    await loadFloorDoorData()

  } catch (error) {
    console.error('处理Modal确认失败:', error)
    uni.showToast({
      title: '操作失败',
      icon: 'error'
    })
  }
}

// 关闭视图
const handleClose = () => {
  emit('close')
}

// 对外暴露的方法
defineExpose({
  loadFloorDoorData,
  selectedFloor,
  selectedDoor,
  scrollToBottom
})

// 生命周期
onMounted(async () => {
  await loadFloorDoorData()
  // 延迟滚动到底部，确保数据加载完成
  setTimeout(() => {
    scrollToBottom()
  }, 100)
})
</script>

<style>
.floor-door-view {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
  z-index: 200;
}

.content {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  position: relative;
}

.floor-door-scroll {
  flex: 1;
  width: 100%;
  position: relative;
}

/* 隐藏滚动条但保持滚动功能 */
.floor-door-scroll ::-webkit-scrollbar {
  display: none;
  width: 0;
  height: 0;
  background: transparent;
}

.floor-door-scroll {
  -ms-overflow-style: none;
  scrollbar-width: none;
}

.scroll-container {
  padding: 40rpx 0;
  min-height: 100%;
}

/* 楼层行 */
.floor-row {
  display: flex;
  flex-direction: row;
  align-items: stretch;
  min-height: 140rpx;
  margin: 0 20rpx;
  margin-bottom: 20rpx;
  background: rgba(255, 255, 255, 0.95);
  border-radius: 24rpx;
  box-shadow: 0 6rpx 24rpx rgba(0, 0, 0, 0.1);
  backdrop-filter: blur(16rpx);
  overflow: hidden;
  transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
}

.floor-row:hover {
  transform: translateY(-3rpx) scale(1.01);
  box-shadow: 0 12rpx 40rpx rgba(0, 0, 0, 0.15);
}

/* 门牌区域 (左右各45%) */
.door-section {
  flex: 0 0 45%;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20rpx;
  position: relative;
}

/* 中间楼层号 (10%) */
.floor-center {
  flex: 0 0 10%;
  display: flex;
  justify-content: center;
  position: relative;
  z-index: 2;
}

.floor-display {
  font-size: 36rpx;
  font-weight: 900;
  color: #333;
  text-shadow: 0 3rpx 6rpx rgba(0, 0, 0, 0.3);
  letter-spacing: 2rpx;
  line-height: 1;
  position: relative;
  z-index: 1;
}

/* 门牌卡片 */
.door-card {
  width: 100%;
  background: #ffffff;
  border-radius: 20rpx;
  padding: 24rpx 20rpx;
  border: 2rpx solid transparent;
  transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
  cursor: pointer;
  position: relative;
  overflow: hidden;
  box-shadow: 0 2rpx 12rpx rgba(0, 0, 0, 0.08);
}

.door-card:hover {
  transform: translateY(-3rpx) scale(1.02);
  box-shadow: 0 8rpx 25rpx rgba(0, 0, 0, 0.12);
}

.door-card:hover::before {
  opacity: 1;
  transform: translateY(0);
}

.door-card.available {
  border-color: #28a745;
  background: linear-gradient(135deg, #f8fff9 0%, #e8f5e8 100%);
}

.door-card.available::before {
  background: linear-gradient(90deg, #28a745, #20c997);
}

.door-card.occupied {
  border-color: #6c757d;
  background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
}

.door-card.occupied::before {
  background: linear-gradient(90deg, #007bff, #6610f2);
}

.door-card.selected {
  border-color: #007bff;
  background: linear-gradient(135deg, #e7f3ff 0%, #cce7ff 100%);
  box-shadow: 0 12rpx 30rpx rgba(0, 123, 255, 0.4);
  transform: translateY(-3rpx) scale(1.03);
}

.door-card:active {
  transform: translateY(-1rpx) scale(0.99);
}

/* 门牌头部 */
.door-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 12rpx;
}

.door-id {
  font-size: 32rpx;
  font-weight: 700;
  color: #2c3e50;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

/* 状态指示器 */
.status-dot {
  width: 12rpx;
  height: 12rpx;
  border-radius: 50%;
  background: #6c757d;
}

.status-dot.available {
  background: #28a745;
  box-shadow: 0 0 8rpx rgba(40, 167, 69, 0.4);
}

.status-dot.occupied {
  background: #007bff;
  box-shadow: 0 0 8rpx rgba(0, 123, 255, 0.4);
}

/* 住户信息 */
.resident-info {
  display: flex;
  flex-direction: column;
  gap: 4rpx;
}

.resident-name {
  font-size: 24rpx;
  font-weight: 600;
  color: #495057;
  line-height: 1.3;
}

.resident-status {
  font-size: 20rpx;
  color: #6c757d;
  background: rgba(108, 117, 125, 0.1);
  padding: 2rpx 8rpx;
  border-radius: 8rpx;
  align-self: flex-start;
}

/* 空置状态 */
.empty-status {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 8rpx 0;
}

.empty-text {
  font-size: 24rpx;
  color: #28a745;
  font-weight: 500;
  opacity: 0.8;
}

/* 底部占位 */
.bottom-spacer {
  height: 20rpx;
}

/* 楼层指示器 */
.floor-indicator {
  position: absolute;
  top: 40rpx;
  right: 40rpx;
  background: rgba(0, 0, 0, 0.7);
  color: #ffffff;
  padding: 12rpx 24rpx;
  border-radius: 20rpx;
  backdrop-filter: blur(10rpx);
  z-index: 10;
}

.indicator-text {
  font-size: 28rpx;
  font-weight: 600;
}

/* 空状态 */
.empty {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 120rpx;
  color: #6c757d;
  font-size: 32rpx;
  text-align: center;
}

/* 加载状态 */
.loading {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 120rpx;
  color: #6c757d;
  font-size: 28rpx;
}
</style>