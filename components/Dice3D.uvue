<template>
  <view :class="['dice-' + componentId, 'box', { 'disabled': disabled }]" ref="boxRef" :style="diceStyle">
    <view class="front face">
      <view v-if="!disabled && residentCount" class="wavy">
        <view class="wave wave-1"></view>
        <view class="wave wave-2"></view>
        <view class="wave wave-3"></view>
      </view>
      <view v-if="disabled" class="lock-icon">
        <text>üîí</text>
      </view>
      <view v-else class="building-number">
        <text>{{ buildingNumber }}</text>
        <text v-if="residentCount" class="resident-count">({{ residentCount }})</text>
      </view>
    </view>
    <view class="back face"></view>
    <view class="left face"></view>
    <view class="right face" :style="{
      transform: `rotateY(90deg) translateZ(${rightTranslateZ})`
    }">
      <view v-if="!disabled && residentCount" class="wavy">
        <view class="wave wave-1"></view>
        <view class="wave wave-2"></view>
        <view class="wave wave-3"></view>
      </view>
    </view>
    <view class="top face"></view>
  </view>
</template>

<script setup>
import { onMounted, ref, getCurrentInstance, computed } from 'vue'

const instance = getCurrentInstance()

const boxRef = ref(null)
const rightTranslateZ = ref('133px')
const componentId = ref(Math.random().toString(36).substr(2, 9))

// Props
const props = defineProps({
  disabled: {
    type: Boolean,
    default: false
  },
  buildingNumber: {
    type: Number,
    default: ''
  },
  residentCount: {
    type: Number,
    default: 0
  },
  doorCount: {
    type: Number,
    default: 0
  },
  totalCapacity: {
    type: Number,
    default: 0
  },
})

// ÈöèÊú∫ÂàùÂßãËßíÂ∫¶ÔºàÁî®‰∫éÊ≥¢Êµ™Âä®ÁîªÔºâ
const randomWaveRotation = ref(Math.random() * 360) // 0-360Â∫¶

// ËÆ°ÁÆóÊ≥¢Êµ™È´òÂ∫¶ÔºàÂü∫‰∫éÂÖ•‰ΩèÁéáÔºâ
const waveHeight = computed(() => {
  const occupancyRate = props.totalCapacity > 0 ? props.doorCount / props.totalCapacity : 0
  // -75% Êé•ËøëÁ©∫Ôºå-100% Êé•ËøëÊª°
  return -75 - (occupancyRate * 25)
})

// ËÆ°ÁÆóÊ≥¢Êµ™Ê†∑ÂºèÔºàÂåÖÂê´ÈöèÊú∫ÂàùÂßãËßíÂ∫¶ÂíåÈ´òÂ∫¶Ôºâ
const waveStyle = computed(() => {
  return {
    transform: `translate(-50%, ${waveHeight.value}%) rotate(${randomWaveRotation.value}deg)`
  }
})

// ËÆ°ÁÆóÈ™∞Â≠êÊ†∑ÂºèÔºàËÆæÁΩÆCSSÂèòÈáèÔºâ
const diceStyle = computed(() => {
  return {
    '--wave-height': `${waveHeight.value}%`,
    '--wave-rotation': `${randomWaveRotation.value}deg`
  }
})

onMounted(() => {
	const query = uni.createSelectorQuery().in(instance.proxy);
    query.select(`.dice-${componentId.value} .front`).boundingClientRect(function(data) {
      if (data) {
        // Âü∫Á°ÄÂ∞∫ÂØ∏
        const baseSize = 25
        // right: Âü∫‰∫é front ÂÖÉÁ¥†ÁöÑÂÆΩÂ∫¶Êù•ËÆ°ÁÆó
        const rightZ = (data.width - 25) / Math.cos(16 * Math.PI / 180)  // (data.width - 25) / cos(15deg)
        rightTranslateZ.value = `${rightZ}px`
      }
    }).exec()
})
</script>

<style>
.box {
  width: 80%;
  height: 65%;
  position: relative;
  transform-style: preserve-3d;
  transform: rotateX(-10deg) rotateY(-15deg);
  overflow: visible;
  transition: transform 0.6s ease;
}

.box.disabled .face {
  background: linear-gradient(135deg, #f0f0f0 0%, #e8e9ea 50%, #d9dcdf 100%);
  /* filter: grayscale(0.8); */
  /* opacity: 0.7; */
}

.face {
  background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 50%, #e9ecef 100%);
  border-radius: 8px;
  position: relative;
}

.front {
  position: absolute;
  width: 100%;
  height: 100%;
  border: 2px solid #dee2e6;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  transform: translateZ(25px);
  box-shadow:
    0 4px 8px rgba(0,0,0,0.1),
    inset 0 1px 0 rgba(255,255,255,0.8);
  background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 50%, #e9ecef 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.wavy {
  position: absolute;
  left: 0;
  top: 0;
  background: #24e32d;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.wave {
  position: absolute;
  width: 300%;
  height: 300%;
  top: 0;
  left: 50%;
  transform: translate(-50%, -75%);
  border-radius: 45%;
}

.right .wave {
  width: 800%;
}

.wave-1 {
  animation: waveAnimate 8s linear infinite;
  background: rgba(255,255,255,1);
}

.wave-2 {
  animation: waveAnimate 12s linear infinite reverse;
  background: rgba(73, 115, 255, 0.05);
  border-radius: 40%;
  background: rgba(255,255,255,0.5);
}

.wave-3 {
  animation: waveAnimate 16s linear infinite;
  background: rgba(255,255,255,0.5);
  border-radius: 35%;
}

.back {
  position: absolute;
  width: 100%;
  height: 100%;
  border: 2px solid #dee2e6;
  transform: translateZ(-25px);
  box-shadow:
    inset 0 1px 0 rgba(255,255,255,0.6),
    inset 0 -1px 0 rgba(0,0,0,0.1);
  background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);
}

.top {
  position: absolute;
  width: 100%;
  height: 50px;
  border: 2px solid #dee2e6;
  transform: rotateX(90deg) translateZ(24px);
  box-shadow:
    0 2px 4px rgba(0,0,0,0.1),
    inset 0 1px 0 rgba(255,255,255,0.8);
  background: linear-gradient(180deg, #ffffff 0%, #f8f9fa 100%);
}

.left {
  position: absolute;
  width: 50px;
  height: 100%;
  transform: rotateY(90deg) translateZ(-25px);
  border: 2px solid #dee2e6;
  box-shadow:
    inset -1px 0 0 rgba(0,0,0,0.1),
    inset 1px 0 0 rgba(255,255,255,0.6);
  background: linear-gradient(90deg, #f8f9fa 0%, #e9ecef 100%);
}

.right {
  position: absolute;
  width: 50px;
  height: 100%;
  transform: rotateY(90deg) translateZ(133px);
  border: 2px solid #dee2e6;
  box-shadow:
    inset -1px 0 0 rgba(0,0,0,0.1),
    inset 1px 0 0 rgba(255,255,255,0.6);
  background: linear-gradient(90deg, #e9ecef 0%, #f8f9fa 100%);
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  overflow: hidden;
}

.lock-icon {
  font-size: 24px;
  color: #6c757d;
  text-shadow: 0 1px 2px rgba(0,0,0,0.1);
  animation: lockPulse 2s ease-in-out infinite;
}

.building-number {
  color: #495057;
  font-size: 18px;
  font-weight: bold;
  text-shadow: 0 1px 2px rgba(0,0,0,0.1);
}

.resident-count {
  color: #6c757d;
  font-size: 12px;
  font-weight: normal;
  margin-left: 4px;
}

@keyframes lockPulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.1); }
}

@keyframes waveAnimate {
  0% {
    transform: translate(-50%, var(--wave-height, -75%)) rotate(var(--wave-rotation, 0deg));
  }
  100% {
    transform: translate(-50%, var(--wave-height, -75%)) rotate(calc(var(--wave-rotation, 0deg) + 360deg));
  }
}

.right .wave-1 {
  animation: waveAnimateRight 8s linear infinite;
}

.right .wave-2 {
  animation: waveAnimateRight 12s linear infinite reverse;
  border-radius: 40%;
}

.right .wave-3 {
  animation: waveAnimateRight 16s linear infinite;
  border-radius: 35%;
}

@keyframes waveAnimateRight {
  0% {
    transform: translate(-50%, var(--wave-height, -75%)) rotate(var(--wave-rotation, 0deg));
  }
  100% {
    transform: translate(-50%, var(--wave-height, -75%)) rotate(calc(var(--wave-rotation, 0deg) + 360deg));
  }
}
</style>