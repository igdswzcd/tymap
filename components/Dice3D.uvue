<template>
  <view :class="['dice-' + componentId, 'box', { 'disabled': disabled }]" ref="boxRef" :style="diceStyle">
    <view class="front face">
      <view v-if="!disabled && residentCount" :class="['wavy', getGradientClass(buildingNumber)]">
        <view class="wave wave-1"></view>
        <view class="wave wave-2"></view>
        <view class="wave wave-3"></view>
      </view>
      <view v-if="disabled" class="lock-icon">
        <text>🔒</text>
      </view>
      <view v-else class="dice-content">
        <!-- 顶部单元号 -->
        <view class="units-row">
          <view
            v-for="(unit, index) in unitNumbers"
            :key="index"
            class="unit-item"
          >
            <text class="unit-text">{{ unit }}</text>
          </view>
        </view>

        <!-- 左下角数据区域 -->
        <view class="bottom-left-data">
          <view v-if="residentCount" class="resident-count-container">
            <text class="resident-count">{{ residentCount }}人</text>
          </view>
          <view class="occupancy-rate-container">
            <text class="occupancy-rate">{{ occupancyRate }}%</text>
          </view>
        </view>

        <!-- 右下角栋号 -->
        <view class="building-number-corner">
          <text class="building-number-text">{{ buildingNumber }}</text>
          <text class="superscript">#</text>
        </view>
      </view>
    </view>
    <view class="back face"></view>
    <view class="left face"></view>
    <view class="right face" :style="{
      transform: `rotateY(90deg) translateZ(${rightTranslateZ})`
    }">
      <view v-if="!disabled && residentCount" :class="['wavy', getRightGradientClass(buildingNumber)]">
        <view class="wave wave-1"></view>
        <view class="wave wave-2"></view>
        <view class="wave wave-3"></view>
      </view>
    </view>
    <view class="top face"></view>
  </view>
</template>

<script setup>
import { onMounted, ref, getCurrentInstance, computed } from 'vue'

const instance = getCurrentInstance()

const boxRef = ref(null)
const rightTranslateZ = ref('133px')
const componentId = ref(Math.random().toString(36).substr(2, 9))

// Props
const props = defineProps({
  disabled: {
    type: Boolean,
    default: false
  },
  buildingNumber: {
    type: Number,
    default: ''
  },
  unitNumbers: {
    type: Array,
    default: () => []
  },
  residentCount: {
    type: Number,
    default: 0
  },
  doorCount: {
    type: Number,
    default: 0
  },
  totalCapacity: {
    type: Number,
    default: 0
  },
})

// 随机初始角度（用于波浪动画）
const randomWaveRotation = ref(Math.random() * 360) // 0-360度

// 计算入住率
const occupancyRate = computed(() => {
  const rate = props.totalCapacity > 0 ? props.doorCount / props.totalCapacity : 0
  return Math.round(rate * 100)
})

// 计算波浪高度（基于入住率）
const waveHeight = computed(() => {
  const rate = props.totalCapacity > 0 ? props.doorCount / props.totalCapacity : 0
  // -75% 接近空，-100% 接近满
  return -75 - (rate * 25)
})


// 计算骰子样式（设置CSS变量）
const diceStyle = computed(() => {
  return {
    '--wave-height': `${waveHeight.value}%`,
    '--wave-rotation': `${randomWaveRotation.value}deg`
  }
})

// 根据栋号获取渐变class
const getGradientClass = (buildingNumber) => {
  const num = parseInt(buildingNumber)

  // class1,4,17: 80%透明度黄->黄
  if ([1, 4, 7].includes(num)) {
    return 'gradient-yellow-transparent'
  }

  // class2,3：黄->蓝->淡红
  if ([2, 3].includes(num)) {
    return 'gradient-yellow-blue-red'
  }

  // class8,9：淡红->蓝
  if ([8, 9].includes(num)) {
    return 'gradient-red-blue'
  }

  // class villa：80%淡绿->淡绿
  // 假设别墅栋号为10及以上
  if (num >= 10) {
    return 'gradient-green-transparent'
  }

  // 默认返回黄色透明渐变
  return 'gradient-yellow-transparent'
}

// 根据栋号获取right面渐变class（基于终止色）
const getRightGradientClass = (buildingNumber) => {
  const num = parseInt(buildingNumber)

  // class1,4,17: 终止色为黄色透明
  if ([1, 4, 17].includes(num)) {
    return 'right-gradient-yellow'
  }

  // class2,3：终止色为淡红色
  if ([2, 3].includes(num)) {
    return 'right-gradient-red'
  }

  // class8,9：终止色为蓝色
  if ([8, 9].includes(num)) {
    return 'right-gradient-blue'
  }

  // class villa：终止色为绿色透明
  if (num >= 10) {
    return 'right-gradient-green'
  }

  // 默认返回黄色
  return 'right-gradient-yellow'
}

onMounted(() => {
	const query = uni.createSelectorQuery().in(instance?.proxy);
    query.select(`.dice-${componentId.value} .front`).boundingClientRect(function(data) {
      if (data) {
        // 基础尺寸
        const baseSize = 25
        // right: 基于 front 元素的宽度来计算
        const rightZ = (data.width - 25) / Math.cos(16 * Math.PI / 180)  // (data.width - 25) / cos(15deg)
        rightTranslateZ.value = `${rightZ}px`
      }
    }).exec()
})
</script>

<style>
.box {
  width: 80%;
  height: 75%;
  position: relative;
  transform-style: preserve-3d;
  transform: rotateX(-10deg) rotateY(-15deg);
  overflow: visible;
  transition: transform 0.6s ease;
}

.box.disabled .face {
  background: linear-gradient(135deg, #f0f0f0 0%, #e8e9ea 50%, #d9dcdf 100%);
  /* filter: grayscale(0.8); */
  /* opacity: 0.7; */
}

.face {
  background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 50%, #e9ecef 100%);
  border-radius: 8px;
  position: relative;
}

.front {
  position: absolute;
  width: 100%;
  height: 100%;
  border: 2px solid #dee2e6;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  transform: translateZ(25px);
  box-shadow:
    0 4px 8px rgba(0,0,0,0.1),
    inset 0 1px 0 rgba(255,255,255,0.8);
  background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 50%, #e9ecef 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

/* 预制渐变样式 */
/* class1,4,17: 80%透明度黄->黄 */
.gradient-yellow-transparent {
  background: linear-gradient(90deg,
    rgba(243, 249, 167, 0.6) 0%,
    rgba(243, 249, 167, 0.8) 100%
  ) !important;
}

/* class2,3：黄->蓝->淡红 */
.gradient-yellow-blue-red {
  background: linear-gradient(90deg,
    #F3F9A780 0%,
    #6dd5ed80 35%,
    #6dd5ed80 65%,
    #FBD78680 100%
  ) !important;
}

/* class8,9：淡红->蓝 */
.gradient-red-blue {
  background: linear-gradient(90deg,
    #FBD78680 0%,
    #6dd5ed80 35%,
    #6dd5edA0 100%
  ) !important;
}

/* class villa：80%淡绿->淡绿 */
.gradient-green-transparent {
  background: linear-gradient(90deg,
    rgba(103, 178, 111, 0.6) 0%,
    rgba(103, 178, 111, 0.8) 100%
  ) !important;
}

/* Right面基于终止色的纯色背景 */
/* 基于黄色终止色 */
.right-gradient-yellow {
  background: rgba(243, 249, 167, 0.5) !important;
}

/* 基于淡红色终止色 */
.right-gradient-red {
  background: #FBD78680 !important;
}

/* 基于蓝色终止色 */
.right-gradient-blue {
  background: #6dd5ed80 !important;
}

/* 基于绿色终止色 */
.right-gradient-green {
  background: rgba(103, 178, 111, 0.5) !important;
}

.wavy {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.wave {
  position: absolute;
  width: 300%;
  height: 300%;
  top: 0;
  left: 50%;
  transform: translate(-50%, -75%);
  border-radius: 45%;
}

.right .wave {
  width: 800%;
}

.wave-1 {
  animation: waveAnimate 8s linear infinite;
  background: rgba(255,255,255,1);
}

.wave-2 {
  animation: waveAnimate 12s linear infinite reverse;
  background: rgba(73, 115, 255, 0.05);
  border-radius: 40%;
  background: rgba(255,255,255,0.5);
}

.wave-3 {
  animation: waveAnimate 16s linear infinite;
  background: rgba(255,255,255,0.5);
  border-radius: 35%;
}

.back {
  position: absolute;
  width: 100%;
  height: 100%;
  border: 2px solid #dee2e6;
  transform: translateZ(-25px);
  box-shadow:
    inset 0 1px 0 rgba(255,255,255,0.6),
    inset 0 -1px 0 rgba(0,0,0,0.1);
  background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);
}

.top {
  position: absolute;
  width: 100%;
  height: 50px;
  border: 2px solid #dee2e6;
  transform: rotateX(90deg) translateZ(24px);
  box-shadow:
    0 2px 4px rgba(0,0,0,0.1),
    inset 0 1px 0 rgba(255,255,255,0.8);
  background: linear-gradient(180deg, #ffffff 0%, #f8f9fa 100%);
}

.left {
  position: absolute;
  width: 50px;
  height: 100%;
  transform: rotateY(90deg) translateZ(-25px);
  border: 2px solid #dee2e6;
  box-shadow:
    inset -1px 0 0 rgba(0,0,0,0.1),
    inset 1px 0 0 rgba(255,255,255,0.6);
  background: linear-gradient(90deg, #f8f9fa 0%, #e9ecef 100%);
}

.right {
  position: absolute;
  width: 50px;
  height: 100%;
  transform: rotateY(90deg) translateZ(133px);
  border: 2px solid #dee2e6;
  box-shadow:
    inset -1px 0 0 rgba(0,0,0,0.1),
    inset 1px 0 0 rgba(255,255,255,0.6);
  background: linear-gradient(90deg, #e9ecef 0%, #f8f9fa 100%);
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  overflow: hidden;
}

.lock-icon {
  font-size: 24px;
  color: #6c757d;
  text-shadow: 0 1px 2px rgba(0,0,0,0.1);
  animation: lockPulse 2s ease-in-out infinite;
}

.building-number {
  color: #495057;
  font-size: 14px;
  font-weight: bold;
  text-shadow: 0 1px 2px rgba(0,0,0,0.1);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
}

.dice-content {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 8px;
  box-sizing: border-box;
}

/* 顶部单元号行 */
.units-row {
  position: absolute;
  top: 6px;
  left: 0;
  right: 0;
  height: 20px;
  display: flex;
  width: 100%;
  flex-direction: row;
  align-items: center;
}

.unit-item {
  display: flex;
  flex-direction: row;
  flex: 1;
  align-items: center;
  justify-content: center;
  border: 2px solid transparent;
}
.unit-item:not(:last-child) {
  border-right-color: rgba(0, 0, 0, 0.2);
}

.unit-text {
  font-size: 11px;
  text-align: center;
  font-weight: 600;
  color: #495057;
  background: rgba(255, 255, 255, 0.8);
  padding: 2px 6px;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  white-space: nowrap;
}

/* 左下角数据区域 */
.bottom-left-data {
  position: absolute;
  bottom: 6rpx;
  left: 6rpx;
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  gap: 2px;
  z-index: 3;
}

.resident-count-container {
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

.resident-count {
  font-size: 12px;
  color: #18652ca0;
  font-weight: 600;
  background: rgba(40, 167, 69, 0.1);
  padding: 2px 6px;
  border-radius: 8px;
}

.occupancy-rate-container {
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

.occupancy-rate {
  font-size: 12px;
  color: #0d542d80;
  font-weight: 700;
  background: rgba(0, 123, 255, 0.1);
  padding: 2px 6px;
  border-radius: 8px;
}

/* 右下角栋号 */
.building-number-corner {
  position: absolute;
  bottom: 2rpx;
  right: 2rpx;
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  justify-content: flex-end;
  z-index: 3;
}

.building-number-corner .building-number-text {
  color: #495057;
  font-size: 20px;
  font-weight: bold;
}

.building-number-corner .superscript {
  color: #495057;
  font-size: 13px;
  font-weight: normal;
  line-height: 1;
  margin-left: 1px;
  margin-top: 2px;
}

@keyframes lockPulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.1); }
}

@keyframes waveAnimate {
  0% {
    transform: translate(-50%, var(--wave-height, -75%)) rotate(var(--wave-rotation, 0deg));
  }
  100% {
    transform: translate(-50%, var(--wave-height, -75%)) rotate(calc(var(--wave-rotation, 0deg) + 360deg));
  }
}

.right .wave-1 {
  animation: waveAnimateRight 8s linear infinite;
}

.right .wave-2 {
  animation: waveAnimateRight 12s linear infinite reverse;
  border-radius: 40%;
}

.right .wave-3 {
  animation: waveAnimateRight 16s linear infinite;
  border-radius: 35%;
}

@keyframes waveAnimateRight {
  0% {
    transform: translate(-50%, var(--wave-height, -75%)) rotate(var(--wave-rotation, 0deg));
  }
  100% {
    transform: translate(-50%, var(--wave-height, -75%)) rotate(calc(var(--wave-rotation, 0deg) - 360deg));
  }
}
</style>