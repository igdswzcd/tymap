<template>
  <view :class="['unit-dice-' + componentId, 'box', { 'disabled': disabled }]" ref="boxRef" :style="diceStyle">
    <view class="front face">
      <view v-if="disabled" class="lock-icon">
        <text>üîí</text>
      </view>
      <view v-else class="dice-content">
        <!-- ‰∏≠Â§ÆÂçïÂÖÉÂè∑ -->
        <view class="unit-center">
          <text class="unit-number">{{ unitNumber }}</text>
        </view>

        <!-- Â∑¶‰∏ãËßíÊï∞ÊçÆÂå∫Âüü -->
        <view class="bottom-left-data">
          <view class="resident-count-container">
            <text class="resident-count">{{ residentCount }}‰∫∫</text>
          </view>
          <view class="household-rate-container">
            <text class="household-rate">{{ occupancyRate }}%</text>
          </view>
        </view>

        <!-- Âè≥‰∏ãËßíÂçïÂÖÉ‰ø°ÊÅØ -->
        <view class="unit-info-corner">
          <text class="unit-label">Unit {{ unitNumber }}</text>
        </view>

        <!-- Âè≥‰∏äËßíÊ•ºÂ±Ç‰ø°ÊÅØ -->
        <view class="floor-info-corner">
          <text class="floor-count">{{ floorCount }}Â±Ç</text>
        </view>
      </view>
    </view>
    <view class="back face"></view>
    <view class="left face"></view>
    <view class="right face" :style="{
      transform: `rotateY(90deg) translateZ(${rightTranslateZ || '100px'})`
    }">
    </view>
    <view class="top face"></view>
  </view>
</template>

<script setup>
import { onMounted, ref, getCurrentInstance, computed } from 'vue'

const instance = getCurrentInstance()

const boxRef = ref(null)
const rightTranslateZ = ref('100px')
const componentId = ref(Math.random().toString(36).substr(2, 9))

// Props
const props = defineProps({
  disabled: {
    type: Boolean,
    default: false
  },
  unitNumber: {
    type: Number,
    default: 1
  },
  residentCount: {
    type: Number,
    default: 0
  },
  doorCount: {
    type: Number,
    default: 0
  },
  floorCount: {
    type: Number,
    default: 1
  },
  totalCapacity: {
    type: Number,
    default: 1
  },
})

// ËÆ°ÁÆóÂÖ•‰ΩèÁéá
const occupancyRate = computed(() => {
  try {
    const doorCount = Number(props.doorCount) || 0
    const totalCapacity = Number(props.totalCapacity) || 1
    const rate = totalCapacity > 0 ? doorCount / totalCapacity : 0
    return Math.round(rate * 100)
  } catch (error) {
    return 0
  }
})

// ËÆ°ÁÆóÈ™∞Â≠êÊ†∑Âºè
const diceStyle = computed(() => {
  return {}
})

onMounted(() => {
	try {
		const query = uni.createSelectorQuery().in(instance?.proxy);
		query.select(`.unit-dice-${componentId.value} .front`).boundingClientRect(function(data) {
			if (data && data.width) {
				// right: Âü∫‰∫é front ÂÖÉÁ¥†ÁöÑÂÆΩÂ∫¶Êù•ËÆ°ÁÆó
				const rightZ = (data.width - 25) / Math.cos(16 * Math.PI / 180)
				rightTranslateZ.value = `${Math.max(rightZ, 50)}px`
			}
		}).exec()
	} catch (error) {
		console.log('UnitDice3DÂ∞∫ÂØ∏ËÆ°ÁÆóÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§ÂÄº')
	}
})
</script>

<style>
.box {
  width: 95%;
  height: 75%;
  position: relative;
  transform-style: preserve-3d;
  transform: rotateX(-10deg) rotateY(-15deg);
  overflow: visible;
  transition: transform 0.6s ease;
  min-width: 120rpx;
  min-height: 120rpx;
}

.box.disabled .face {
  background: linear-gradient(135deg, #f0f0f0 0%, #e8e9ea 50%, #d9dcdf 100%);
}

.face {
  background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 50%, #e9ecef 100%);
  border-radius: 8px;
  position: relative;
}

.front {
  position: absolute;
  width: 100%;
  height: 100%;
  border: 2px solid #dee2e6;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  transform: translateZ(25px);
  box-shadow:
    0 4px 8px rgba(0,0,0,0.1),
    inset 0 1px 0 rgba(255,255,255,0.8);
  background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 50%, #e9ecef 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.back {
  position: absolute;
  width: 100%;
  height: 100%;
  border: 2px solid #dee2e6;
  transform: translateZ(-25px);
  box-shadow:
    inset 0 1px 0 rgba(255,255,255,0.6),
    inset 0 -1px 0 rgba(0,0,0,0.1);
  background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);
}

.top {
  position: absolute;
  width: 100%;
  height: 50px;
  border: 2px solid #dee2e6;
  transform: rotateX(90deg) translateZ(24px);
  box-shadow:
    0 2px 4px rgba(0,0,0,0.1),
    inset 0 1px 0 rgba(255,255,255,0.8);
  background: linear-gradient(180deg, #ffffff 0%, #f8f9fa 100%);
}

.left {
  position: absolute;
  width: 50px;
  height: 100%;
  transform: rotateY(90deg) translateZ(-25px);
  border: 2px solid #dee2e6;
  box-shadow:
    inset -1px 0 0 rgba(0,0,0,0.1),
    inset 1px 0 0 rgba(255,255,255,0.6);
  background: linear-gradient(90deg, #f8f9fa 0%, #e9ecef 100%);
}

.right {
  position: absolute;
  width: 50px;
  height: 100%;
  transform: rotateY(90deg) translateZ(133px);
  border: 2px solid #dee2e6;
  box-shadow:
    inset -1px 0 0 rgba(0,0,0,0.1),
    inset 1px 0 0 rgba(255,255,255,0.6);
  background: linear-gradient(90deg, #e9ecef 0%, #f8f9fa 100%);
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  overflow: hidden;
}

.dice-content {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 16rpx;
  box-sizing: border-box;
}

/* ‰∏≠Â§ÆÂçïÂÖÉÂè∑ */
.unit-center {
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
}

.unit-number {
  font-size: 48rpx;
  font-weight: bold;
  color: #2c3e50;
  line-height: 1;
}

/* Â∑¶‰∏ãËßíÊï∞ÊçÆÂå∫Âüü */
.bottom-left-data {
  position: absolute;
  bottom: 8rpx;
  left: 8rpx;
  display: flex;
  flex-direction: column;
  gap: 4rpx;
  z-index: 3;
}

.resident-count-container {
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

.resident-count {
  font-size: 20rpx;
  color: #495057;
  font-weight: 500;
  background: rgba(108, 117, 125, 0.08);
  padding: 2px 8rpx;
  border-radius: 8rpx;
}

.household-rate-container {
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

.household-rate {
  font-size: 20rpx;
  color: #495057;
  font-weight: 500;
  background: rgba(108, 117, 125, 0.08);
  padding: 2px 8rpx;
  border-radius: 8rpx;
}

/* Âè≥‰∏ãËßíÂçïÂÖÉ‰ø°ÊÅØ */
.unit-info-corner {
  position: absolute;
  bottom: 8rpx;
  right: 8rpx;
  display: flex;
  align-items: flex-end;
  justify-content: flex-end;
  z-index: 3;
}

.unit-info-corner .unit-label {
  font-size: 18rpx;
  color: #6c757d;
  font-weight: 400;
  background: rgba(108, 117, 125, 0.05);
  padding: 2px 8rpx;
  border-radius: 8rpx;
}

/* Âè≥‰∏äËßíÊ•ºÂ±Ç‰ø°ÊÅØ */
.floor-info-corner {
  position: absolute;
  top: 8rpx;
  right: 8rpx;
  display: flex;
  align-items: flex-start;
  justify-content: flex-end;
  z-index: 3;
}

.floor-count {
  font-size: 18rpx;
  color: #6c757d;
  font-weight: 400;
  background: rgba(108, 117, 125, 0.05);
  padding: 2px 8rpx;
  border-radius: 8rpx;
}

@keyframes lockPulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.1); }
}
</style>