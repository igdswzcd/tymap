<template>
	<view class="container">
		<!-- 顶部统计信息 -->
		<view class="stats-section">
			<view class="stat-card">
				<text class="stat-number">{{ statistics.totalResidents || 0 }}</text>
				<text class="stat-label">已入住</text>
			</view>
			<view class="stat-card">
				<text class="stat-number">{{ statistics.totalCapacity || 0 }}</text>
				<text class="stat-label">总容量</text>
			</view>
			<view class="stat-card">
				<text class="stat-number">{{ statistics.occupancyRate || 0 }}%</text>
				<text class="stat-label">入住率</text>
			</view>
		</view>

		<!-- 用户信息 -->
		<view class="user-section">
			<view class="user-card">
				<text class="user-name">{{ userInfo.nickname || '未注册' }}</text>
				<text class="user-phone">{{ userInfo.phone || '' }}</text>
				<view class="user-badges">
					<text v-if="isRegistered" class="badge registered">已注册</text>
					<text v-if="hasHighCredit" class="badge high-credit">已认证</text>
					<text v-if="isAdmin" class="badge admin">管理员</text>
				</view>
			</view>
		</view>
	</view>
</template>

<script setup lang="uts">
import { ref, reactive, onMounted } from 'vue'
import { getCommunityStats } from '@/utils/buildingData.js'
import { getUserOpenid } from '@/utils/mockData.uts'

const communityStats = ref(getCommunityStats())
const statistics = reactive({
	totalResidents: 0,
	totalCapacity: communityStats.value.totalDoors,
	occupancyRate: 0
})
const userInfo = ref({
	nickname: '',
	phone: '',
	credit_level: 0,
	is_super_admin: false,
	is_unit_admin: false
})
const isRegistered = ref(false)
const hasHighCredit = ref(false)
const isAdmin = ref(false)

// 计算入住率
const calculateOccupancyRate = (residentCount: number): number => {
	const totalCapacity = statistics.totalCapacity || communityStats.value.totalDoors
	return totalCapacity > 0 ? Math.round((residentCount / totalCapacity) * 100) : 0
}

// 加载住户统计数据
const loadResidentStatistics = async (): Promise<void> => {
	try {
		const db = uniCloud.databaseForJQL()

		// 总住户数
		const totalRes = await db.collection('residents').count()
		statistics.totalResidents = totalRes.total || 0
		statistics.occupancyRate = calculateOccupancyRate(totalRes.total || 0)
	} catch (error) {
		console.error('加载住户统计数据失败:', error)
	}
}

// 加载用户信息
const loadUserInfo = async (): Promise<void> => {
	try {
		const openid = await getUserOpenid()

		const db = uniCloud.databaseForJQL()
		const res = await db.collection('residents')
			.where({
				openid: openid
			})
			.get()

		if (res.data && res.data.length > 0) {
			const userData = res.data[0]
			userInfo.value = {
				nickname: userData.nickname || '',
				phone: userData.phone || '',
				credit_level: userData.credit_level || 0,
				is_super_admin: userData.is_super_admin || false,
				is_unit_admin: userData.is_unit_admin || false
			}
			isRegistered.value = true
			hasHighCredit.value = (userData.credit_level || 0) > 0
			isAdmin.value = !!(userData.is_super_admin || userData.is_unit_admin)
		}
	} catch (error) {
		console.error('加载用户信息失败:', error)
	}
}

// 统一加载数据
const loadData = async (): Promise<void> => {
	loadResidentStatistics()
	loadUserInfo()
}

onMounted(() => {
	loadData()
})
</script>

<style>
.container {
	padding: 20rpx;
	background-color: #f5f5f5;
	min-height: 100vh;
}

.stats-section {
	display: flex;
	justify-content: space-between;
	margin-bottom: 30rpx;
}

.stat-card {
	flex: 1;
	margin: 0 10rpx;
	background: white;
	border-radius: 15rpx;
	padding: 30rpx 20rpx;
	text-align: center;
	box-shadow: 0 2rpx 10rpx rgba(0,0,0,0.1);
}

.stat-card:first-child {
	margin-left: 0;
}

.stat-card:last-child {
	margin-right: 0;
}

.stat-number {
	display: block;
	font-size: 36rpx;
	font-weight: bold;
	color: #3cc51f;
	margin-bottom: 10rpx;
}

.stat-label {
	font-size: 24rpx;
	color: #666;
}

.user-section {
	margin-bottom: 30rpx;
}

.user-card {
	background: white;
	border-radius: 15rpx;
	padding: 30rpx;
	box-shadow: 0 2rpx 10rpx rgba(0,0,0,0.1);
}

.user-name {
	display: block;
	font-size: 32rpx;
	font-weight: bold;
	color: #333;
	margin-bottom: 10rpx;
}

.user-phone {
	display: block;
	font-size: 28rpx;
	color: #666;
	margin-bottom: 20rpx;
}

.user-badges {
	display: flex;
	gap: 10rpx;
}

.badge {
	font-size: 20rpx;
	padding: 5rpx 10rpx;
	border-radius: 10rpx;
	color: white;
}

.badge.registered {
	background: #3cc51f;
}

.badge.high-credit {
	background: #2196f3;
}

.badge.admin {
	background: #ff9800;
}
</style>