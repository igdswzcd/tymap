<template>
	<view class="container">
		<!-- 主要内容区域 - 容器 -->
		<view class="main-content">
			<BuildingView @buildingTap="onBuildingTap" ref="buildingViewRef" />
		</view>
		<view class="opr-area">
			<view class="button-container">
				<!-- 左侧区域 - 上下flex布局 -->
				<view
					v-if="userRole.isSuperAdmin"
					class="left-area"
				>
					<view
						class="action-button audit-button audit-button-red"
						@tap="handleRequestList"
					>
						<image src="@/static/audit.svg"></image>
					</view>
					<view
						class="action-button audit-button"
						@tap="handleSecondAction"
					>
						<image src="@/static/audit.svg"></image>
					</view>
				</view>

				<!-- 入住流程内部绶带面包屑 -->
				<view
					v-if="!userRole.isResident"
					class="ribbon-breadcrumb-container"
				>
					<!-- 主要入住按钮（包含内部绶带） -->
					<view
						class="action-button checkin-button"
						@tap="handleMainCheckinTap"
					>
						<!-- 按钮左侧的绶带面包屑 -->
						<view
							v-if="checkinBreadcrumb.length > 0"
							class="internal-ribbon-breadcrumbs"
						>
							<view
								v-for="(breadcrumb, index) in checkinBreadcrumb"
								:key="index"
								class="internal-ribbon-item"
								:class="getRibbonItemClass(index, checkinBreadcrumb.length)"
								@tap.stop="handleBreadcrumbTap(index)"
							>
								<view class="internal-ribbon-content">
									<text class="internal-ribbon-text">{{ breadcrumb.name }}</text>
								</view>
							</view>
						</view>

						<!-- 按钮内容区域 -->
						<view
							class="button-content"
							:class="{ 'with-internal-ribbon': checkinBreadcrumb.length > 0 }"
						>
							<text class="button-text">{{ checkinButtonText }}</text>
							<text class="button-text button-exclamation">!!</text>
						</view>
					</view>
				</view>

				<!-- 用户信息面板 - 住户可见 -->
				<view
					v-else
					class="user-info-panel"
				>
					<!-- 左侧头像滚动区 (2/5) -->
					<view class="avatar-scroll-area">
						<view class="avatar-container">

							<view class="avatar-marquee">
								<view
									v-for="(resident, index) in userInfo.doorResidents"
									:key="'first-'+index"
									class="avatar-placeholder"
								>
									<text class="avatar-text">{{ getAvatarText(resident) }}</text>
								</view>
							</view>
							<view class="avatar-marquee">
								<view
									v-for="(resident, index) in userInfo.doorResidents"
									:key="'second-'+index"
									class="avatar-placeholder"
								>
									<text class="avatar-text">{{ getAvatarText(resident) }}</text>
								</view>
							</view>
						</view>
					</view>

					<!-- 右侧信息区 (3/5) -->
					<view class="info-area">
						<view class="location-info-container">
  <text class="location-text">{{ locationText }}</text>
  <text class="location-superscript">#</text>
  <text class="location-rest">{{ locationRest }}</text>
</view>
						<text class="neighbor-info">认识一下单元内{{ userInfo.neighborCount }}个邻居~</text>
					</view>
				</view>
			</view>
		</view>
	</view>
</template>

<script setup lang="uts">
import { ref, reactive, onMounted, computed, watch } from 'vue'
import BuildingView from '@/components/BuildingView.uvue'
import { getUserOpenid } from '@/utils/mockData.uts'
import dataManager from '@/utils/dataManager.js'
import buildingManager from '@/utils/buildingManager.js'
import checkinStore, { type BreadcrumbItem } from '@/store/index.uts'

const buildingViewRef = ref()

// 用户角色状态
const userRole = reactive({
	isResident: true,
	isSuperAdmin: true,
	openid: 'openid_2_36_1_1'
})

// 入住按钮文本 - 使用全局状态管理
const checkinButtonText = computed(() => checkinStore.getButtonText())

// breadcrumb导航 - 使用全局状态管理
const checkinBreadcrumb = computed(() => checkinStore.getBreadcrumb())

// 用户信息显示
const userInfo = reactive({
	location: '2-36-1-1',
	neighborCount: 8,
	unitNeighbors: [],
	doorResidents: []
})

// 计算头像容器宽度
const avatarContainerWidth = computed(() => {
	const residentCount = userInfo.doorResidents.length
	if (residentCount === 0) return '0rpx'
	return `${residentCount * 2 * 80}rpx` // 双倍数量 * 每个头像占80rpx
})

// 获取头像显示文字
const getAvatarText = (resident: any) => {
	if (!resident || !resident.nickname) return '户'
	return resident.nickname.charAt(0)
}

// 获取绶带项的class
const getRibbonItemClass = (index: number, totalCount: number) => {
	const classes = []

	if (totalCount === 1) {
		// 只有一个面包屑时，使用单独的样式
		classes.push('internal-ribbon-first')
	} else {
		// 多个面包屑时，正常分配first和last
		if (index === 0) {
			classes.push('internal-ribbon-first')
		} else if (index === totalCount - 1) {
			classes.push('internal-ribbon-last')
		}
	}

	return classes
}

// 楼栋点击事件
const onBuildingTap = (building: any) => {
	console.log('点击楼栋:', building)
	// 事件处理已在BuildingView组件内部完成
}


// 申请列表按钮点击
const handleRequestList = () => {
	console.log('查看申请列表')
	// 跳转到申请列表页面
}

// 主要入住按钮点击
const handleMainCheckinTap = async () => {
	console.log('主要入住按钮点击')

	const currentStep = checkinStore.getState().step
	console.log('当前步骤:', currentStep)

	switch (currentStep) {
		case 'idle':
			// 启动入住流程
			await handleCheckin()
			break
		case 'selecting_building':
			// 在楼栋选择状态，可以返回或重置
			console.log('楼栋选择状态，点击主按钮返回首页')
			checkinStore.reset()
			break
		case 'selecting_unit':
			// 在单元选择状态，点击主按钮返回楼栋选择
			console.log('单元选择状态，点击主按钮返回楼栋选择')
			checkinStore.goToLevel('building')
			break
		case 'selecting_floor_door':
			// 在楼层门牌选择状态，点击主按钮返回单元选择
			console.log('楼层门牌选择状态，点击主按钮返回单元选择')
			checkinStore.goToLevel('unit')
			break
		case 'confirming':
			// 在确认状态，点击主按钮提交申请
			console.log('确认状态，点击主按钮提交申请')
			await handleSubmitApplication()
			break
		default:
			// 默认重置
			checkinStore.reset()
	}
}

// 提交入住申请
const handleSubmitApplication = async () => {
	try {
		const state = checkinStore.getState()
		if (state.selectedBuilding && state.selectedUnit && state.selectedFloor && state.selectedDoor) {
			console.log('提交入住申请:', {
				building: state.selectedBuilding,
				unit: state.selectedUnit,
				floor: state.selectedFloor,
				door: state.selectedDoor
			})

			// TODO: 实际提交申请到数据库
			uni.showToast({
				title: '申请提交成功',
				icon: 'success'
			})

			// 重置状态
			checkinStore.reset()
		} else {
			uni.showToast({
				title: '请完成所有选择',
				icon: 'none'
			})
		}
	} catch (error) {
		console.error('提交申请失败:', error)
		uni.showToast({
			title: '提交失败',
			icon: 'none'
		})
	}
}

// 入住按钮点击
const handleCheckin = async () => {
	console.log('申请入住')
	try {
		// 使用全局状态管理启动入住流程
		checkinStore.startCheckin(userRole.openid)

		console.log('入住流程已启动')
	} catch (error) {
		console.error('设置入住状态失败:', error)
		uni.showToast({
			title: '入住流程启动失败',
			icon: 'none'
		})
	}
}

// breadcrumb点击事件
const handleBreadcrumbTap = (index: number) => {
	const breadcrumb = checkinBreadcrumb.value[index]
	console.log('点击breadcrumb:', breadcrumb)

	// 根据点击的breadcrumb类型直接跳转到对应层级
	checkinStore.goToLevel(breadcrumb.type)
}

// 第二个audit按钮点击
const handleSecondAction = () => {
	console.log('第二个audit按钮')
	uni.showToast({
		title: '第二个功能开发中',
		icon: 'none'
	})
}


// 格式化用户位置信息
const formatUserLocation = (userData: any) => {
	if (!userData) return ''
	return `${userData.building}#${userData.unit}-${userData.floor}0${userData.door}`
}

// 分解位置信息用于显示
const locationText = ref('')
const locationRest = ref('')

const updateLocationDisplay = (location: string) => {
	if (!location) {
		locationText.value = ''
		locationRest.value = ''
		return
	}

	const hashIndex = location.indexOf('#')
	if (hashIndex !== -1) {
		locationText.value = location.substring(0, hashIndex)
		locationRest.value = location.substring(hashIndex + 1)
	} else {
		locationText.value = location
		locationRest.value = ''
	}
}

// 获取单元内邻居数量
const getUnitNeighborCount = async (userData: any) => {
	if (!userData) return 0

	try {
		// 获取同楼栋同单元的所有住户
		const unitResidents = await dataManager.getResidentsByUnit(userData.building, userData.unit)
		// 排除自己
		return unitResidents.filter(r => r.openid !== userData.openid).length
	} catch (error) {
		console.error('获取邻居数量失败:', error)
		return 0
	}
}

// 获取同门住户信息
const getDoorResidents = async (userData: any) => {
	if (!userData) return []

	try {
		// 获取同楼栋同单元同楼层的所有住户
		const allResidents = await dataManager.getAllResidents()
		const doorResidents = allResidents.filter(r =>
			r.building === userData.building &&
			r.unit === userData.unit &&
			r.floor === userData.floor &&
			r.door === userData.door
		)
		return doorResidents
	} catch (error) {
		console.error('获取同门住户失败:', error)
		return []
	}
}

// 检查用户身份
const checkUserRole = async () => {
	try {
		const openid = await getUserOpenid()
		userRole.openid = openid as string

		// 使用dataManager查询用户信息（从缓存读取）
		const userData = await dataManager.getResidentByOpenid(openid)

		if (userData) {
			userRole.isResident = userData.apply_status === 'trusted'
			userRole.isSuperAdmin = userData.is_super_admin || userData.is_unit_admin || false

			// 更新用户信息显示
			userInfo.location = formatUserLocation(userData)
			updateLocationDisplay(userInfo.location)
			userInfo.neighborCount = await getUnitNeighborCount(userData)
			userInfo.doorResidents = await getDoorResidents(userData)

			console.log('用户身份:', userRole)
			console.log('用户信息:', userInfo)
		} else {
			userRole.isResident = false
			userRole.isSuperAdmin = false
			console.log('用户不是住户')
		}
	} catch (error) {
		console.error('检查用户身份失败:', error)
		userRole.isResident = false
		userRole.isSuperAdmin = false
	}
}

// 生命周期
onMounted(async () => {
	try {
		// 初始化数据管理器（加载residents数据到缓存），传入uniCloud实例
		console.log('初始化数据管理器...')
		await dataManager.init(uniCloud)

		// 检查用户身份
		console.log('检查用户身份...')
		await checkUserRole()

		console.log('页面初始化完成')
	} catch (error) {
		console.error('页面初始化失败:', error)
		uni.showToast({
			title: '初始化失败',
			icon: 'none'
		})
	}
})
</script>

<style>
.container {
	height: 100%;
	background-color: #f0f0f0;
	position: relative;
	overflow: hidden;
	display: flex;
}

.main-content {
	display: flex;
	flex-direction: row;
	align-items: center;
	overflow: hidden;
	flex: 1;
}
.opr-area {
	width: 100%;
	height: 220rpx;
	background: transparent;
	border-top: 2rpx solid #e9ecef;
	box-shadow: 0 -4rpx 12rpx rgba(0, 0, 0, 0.08);
	display: flex;
	align-items: center;
	justify-content: center;
	padding: 10rpx 10rpx 20rpx 10rpx;
	box-sizing: border-box;
}

.button-container {
	display: flex;
	flex-direction: row;
	align-items: center;
	gap: 20rpx;
	width: 100%;
	max-width: 750rpx;
	padding: 10rpx;
}


.left-area {
	flex: 1;
	display: flex;
	flex-direction: column;
	gap: 20rpx;
}

.action-button {
	display: flex;
	align-items: center;
	justify-content: center;
	border-radius: 40rpx;
	transition: all 0.3s ease;
	cursor: pointer;
	padding: 15rpx 15rpx;
	box-sizing: border-box;
	box-shadow: 0 8rpx 24rpx rgba(0, 0, 0, 0.12);
}

.action-button:active {
	transform: scale(0.98);
	box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.15);
}

/* Audit按钮 - 白色背景淡灰色边框 */
.audit-button {
	background: #ffffff;
	border: 2rpx solid #e9ecef;
	min-height: 50rpx;
	border-radius: 20rpx;
	box-shadow: 0 4rpx 16rpx rgba(0, 0, 0, 0.08);
}

/* 第一个Audit按钮 - 深红色渐变 */
.audit-button-red {
	background: linear-gradient(135deg, #e5cd14, #ee9568);
	border: none;
}

/* 入住按钮 - 占4份，绿色渐变 */
.checkin-button {
	height: 100%;
	border-radius: 100rpx;
	flex: 4;
	background: linear-gradient(135deg, #00F260, #0575E6);
	min-height: 140rpx;
	box-shadow:
		5rpx 8rpx 8rpx rgba(0, 0, 0, 0.16),
		2rpx 3rpx 6rpx rgba(0, 0, 0, 0.1);
}

.button-icon {
	font-size: 36rpx;
	color: #ffffff;
	margin-right: 16rpx;
}

.button-content {
	display: inline;
	width: 100%;
	text-align: center;
}

.button-text {
	font-size: 48rpx;
	font-weight: 600;
	color: #ffffff;
}

.button-exclamation {
	font-weight: 900;
	font-style: italic;
	margin-left: 8rpx;
}

.button-label {
	font-size: 24rpx;
	color: rgba(255, 255, 255, 0.9);
	margin-top: 4rpx;
}

/* 用户信息面板样式 */
.user-info-panel {
	border-radius: 100rpx;
	flex: 4;
	background: linear-gradient(135deg, #C9D6FF, #E2E2E2);
	min-height: 140rpx;
	box-shadow:
		5rpx 8rpx 8rpx rgba(0, 0, 0, 0.16),
		2rpx 3rpx 6rpx rgba(0, 0, 0, 0.1);
	display: flex;
	flex-direction: row;
	overflow: hidden;
}

/* 左侧头像滚动区 (2/5) */
.avatar-scroll-area {
	flex: 1;
	background: rgba(255, 255, 255, 0.3);
	border-right: 1rpx solid rgba(255, 255, 255, 0.5);
	overflow: hidden;
	position: relative;
	display: flex;
	flex-direction: row;
	align-items: center;
	mask: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.8) 10% 90%, transparent);
}

.avatar-container {
	height: 80rpx;
	width: 100%;
	flex: 1;
	display: flex;
	flex-direction: row;
	align-items: center;
}

.avatar-marquee {
	height: 80rpx;
	width: 100%;
	flex-shrink: 0;
	display: flex;
	flex-direction: row;
	align-items: center;
	gap: 20rpx;
	min-width: 100%;
	animation: marquee 8s linear infinite;
}

.avatar-marquee:last-child {
	position: absolute;
	top: 0;
	left: 0;
	animation-name: marquee2;
}

/* 头像滚动动画 */
@keyframes marquee {
	0% {
		transform: translateX(0);
	}
	100% {
		transform: translateX(-100%);
	}
}

@keyframes marquee2 {
	0% {
		transform: translateX(100%);
	}
	100% {
		transform: translateX(0);
	}
}

.avatar-placeholder {
	width: 80rpx;
	height: 80rpx;
	border-radius: 50%;
	background: linear-gradient(135deg, #ffffff, #f0f0f0);
	box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.1);
	border: 2rpx solid rgba(255, 255, 255, 0.8);
	flex-shrink: 0;
	transition: all 0.6s ease;
	display: flex;
	align-items: center;
	justify-content: center;

	/* 使用CSS动画为滚动过程中的头像添加缩放效果 */
	animation: avatarScale 8s linear infinite;
}

/* 为第二个marquee中的头像设置相同的缩放动画 */
.avatar-marquee:last-child .avatar-placeholder {
	animation: avatarScale 8s linear infinite;
}

/* 头像缩放动画 - 在滚动到中心时放大 */
@keyframes avatarScale {
	0% {
		transform: scale(0.8);
		opacity: 0.5;
	}
	25% {
		transform: scale(1);
		opacity: 1;
	}
	50% {
		transform: scale(0.8);
		opacity: 0.5;
	}
	75% {
		transform: scale(1);
		opacity: 1;
	}
	100% {
		transform: scale(0.8);
		opacity: 0.5;
	}
}

/* 头像文字样式 */
.avatar-text {
	font-size: 24rpx;
	font-weight: 600;
	color: #5a6c7d;
}

/* 中心头像 - 放大和不透明 */
.avatar-placeholder.avatar-center {
	transform: scale(1.2);
	z-index: 2;
	box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.2);
	border-color: rgba(255, 255, 255, 1);
	opacity: 1;
}

/* 接近中心的头像 - 轻微放大 */
.avatar-placeholder.avatar-near {
	transform: scale(1.1);
	opacity: 0.8;
}

/* 远离中心的头像 - 正常大小和透明 */
.avatar-placeholder.avatar-far {
	opacity: 0.5;
}

/* 右侧信息区 (3/5) */
.info-area {
	flex: 2;
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: flex-start;
	padding: 20rpx 30rpx;
}

.location-info-container {
	display: flex;
	align-items: flex-start;
	justify-content: flex-start;
	flex-direction: row;
	margin-bottom: 8rpx;
}

.location-text {
	font-size: 36rpx;
	font-weight: 700;
	color: #2c3e50;
	font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.location-superscript {
	font-size: 24rpx;
	font-weight: normal;
	color: #2c3e50;
	line-height: 1;
	margin-left: 2rpx;
	margin-top: 4rpx;
}

.location-rest {
	font-size: 36rpx;
	font-weight: 700;
	color: #2c3e50;
	font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.neighbor-info {
	font-size: 24rpx;
	color: #5a6c7d;
	font-weight: 400;
	line-height: 1.4;
}

.action-button image {
	width: 40rpx;
	height: 40rpx;
	filter: drop-shadow(2rpx 2rpx 20rpx yellow);
}

/* 内部绶带面包屑容器 */
.ribbon-breadcrumb-container {
	border-radius: 100rpx;
	flex: 4;
	min-height: 140rpx;
	width: 100%;
}

/* 按钮内部绶带面包屑组 */
.internal-ribbon-breadcrumbs {
	height: 100%;
	position: absolute;
	left: 60rpx;
	top: 50%;
	transform: translateY(-50%);
	display: flex;
	flex-direction: row;
	align-items: center;
	z-index: 5;
}

/* 内部绶带项 - 平行四边形效果 */
.internal-ribbon-item {
	position: relative;
	height: 100%;
	min-width: 140rpx;
	max-width: 160rpx;
	display: flex;
	align-items: center;
	justify-content: center;
	margin-right: -45rpx; /* 重叠效果 */
	clip-path: polygon(45rpx 0, 100% 0, calc(100% - 45rpx) 100%, 0 100%);
	transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
	cursor: pointer;
}

/* 内部绶带内容 */
.internal-ribbon-content {
	width: 100%;
	height: 100%;
	display: flex;
	align-items: center;
	justify-content: center;
	padding: 0 20rpx;
	position: relative;
	z-index: 2;
}

/* 内部绶带文字 */
.internal-ribbon-text {
	font-size: 24rpx;
	font-weight: 700;
	color: #ffffff;
	text-shadow: 0 1rpx 2rpx rgba(0, 0, 0, 0.4);
	white-space: nowrap;
	position: relative;
	z-index: 3;
}

/* 第一个内部绶带 - 第一个面包屑 */
.internal-ribbon-item.internal-ribbon-first {
	background: #ddd !important;
	border-left: none;
	margin-left: 0;
}

.internal-ribbon-item.internal-ribbon-first::before {
	content: '';
	position: absolute;
	left: -15rpx;
	top: 0;
	width: 15rpx;
	height: 100%;
	background: linear-gradient(135deg, #FF6B6B, #C44569) !important;
	clip-path: polygon(0 0, 0 100%, 100% 50%);
	z-index: 1;
}

/* 当只有一个面包屑时（只有first），添加右侧斜边 */
.internal-ribbon-item.internal-ribbon-first:last-child {
	margin-right: 20rpx;
}

.internal-ribbon-item.internal-ribbon-first:last-child::after {
	content: '';
	position: absolute;
	right: -15rpx;
	top: 0;
	width: 15rpx;
	height: 100%;
	background: linear-gradient(135deg, #FF6B6B, #C44569) !important;
	clip-path: polygon(100% 0, 0 50%, 100% 100%);
	z-index: 1;
}

/* 第二个内部绶带 - 第二个面包屑 */
.internal-ribbon-item.internal-ribbon-last {
	background: linear-gradient(135deg, #4ECDC4, #44A08D) !important;
	border-right: none;
	margin-right: 20rpx;
}

.internal-ribbon-item.internal-ribbon-last::after {
	content: '';
	position: absolute;
	right: -15rpx;
	top: 0;
	width: 15rpx;
	height: 100%;
	background: linear-gradient(135deg, #4ECDC4, #44A08D) !important;
	clip-path: polygon(100% 0, 0 50%, 100% 100%);
	z-index: 1;
}

/* 按钮内容适配内部绶带 */
.button-content.with-internal-ribbon {
	margin-left: 160rpx; /* 为内部绶带留出空间 */
	transition: margin-left 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

/* 内部绶带交互效果 */
.internal-ribbon-item:active {
	transform: translateY(1rpx) scale(0.98);
}

.internal-ribbon-item:hover {
	transform: translateY(-1rpx);
	filter: brightness(1.1);
}

/* 内部绶带层次阴影 */
.internal-ribbon-item {
	box-shadow:
		1rpx 2rpx 4rpx rgba(0, 0, 0, 0.3),
		inset 0 1rpx 0 rgba(255, 255, 255, 0.2);
}

/* 内部绶带动画效果 */
@keyframes internalRibbonSlideIn {
	0% {
		opacity: 0;
		transform: translateX(-20rpx) translateY(-50%);
	}
	100% {
		opacity: 1;
		transform: translateX(0) translateY(-50%);
	}
}

.internal-ribbon-breadcrumbs {
	animation: internalRibbonSlideIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

/* 移除nth-child选择器，避免样式冲突 */

/* 内部绶带光泽效果 */
.internal-ribbon-item::before {
	content: '';
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	height: 30%;
	background: linear-gradient(
		to bottom,
		rgba(255, 255, 255, 0.4) 0%,
		rgba(255, 255, 255, 0.1) 50%,
		rgba(255, 255, 255, 0) 100%
	);
	pointer-events: none;
	z-index: 4;
}




</style>