<template>
	<view class="container">
		<!-- 主要内容区域 - 容器 -->
		<view class="main-content">
			<BuildingView @buildingTap="onBuildingTap" ref="buildingViewRef" />
		</view>
		<view class="opr-area">
			<view class="button-container">
				<!-- 左侧区域 - 上下flex布局 -->
				<view
					v-if="userRole.isSuperAdmin"
					class="left-area"
				>
					<view
						class="action-button audit-button audit-button-red"
						@tap="handleRequestList"
					>
						<image src="@/static/audit.svg"></image>
					</view>
					<view
						class="action-button audit-button"
						@tap="handleSecondAction"
					>
						<image src="@/static/audit.svg"></image>
					</view>
				</view>

				<!-- 入住按钮 - 非住户或超级管理员可见 -->
				<view
					v-if="!userRole.isResident || userRole.isSuperAdmin"
					class="action-button checkin-button"
					@tap="handleCheckin"
				>
					<view class="button-content">
						<text class="button-text">入住</text>
						<text class="button-text button-exclamation">!!</text>
					</view>
				</view>
			</view>
		</view>
	</view>
</template>

<script setup lang="uts">
import { ref, reactive, onMounted } from 'vue'
import BuildingView from '@/components/BuildingView.uvue'
import { getUserOpenid } from '@/utils/mockData.uts'
import dataManager from '@/utils/dataManager.js'
import buildingManager from '@/utils/buildingManager.js'

const buildingViewRef = ref()

// 用户角色状态
const userRole = reactive({
	isResident: true,
	isSuperAdmin: true,
	openid: ''
})

// 楼栋点击事件
const onBuildingTap = (building: any) => {
	console.log('点击楼栋:', building)
	// 事件处理已在BuildingView组件内部完成
}

// 申请列表按钮点击
const handleRequestList = () => {
	console.log('查看申请列表')
	// 跳转到申请列表页面
}

// 入住按钮点击
const handleCheckin = () => {
	console.log('申请入住')
	// 跳转到入住申请页面
}

// 第二个audit按钮点击
const handleSecondAction = () => {
	console.log('第二个audit按钮')
	uni.showToast({
		title: '第二个功能开发中',
		icon: 'none'
	})
}


// 检查用户身份
const checkUserRole = async () => {
	try {
		const openid = await getUserOpenid()
		userRole.openid = openid as string

		// 使用dataManager查询用户信息（从缓存读取）
		const userData = await dataManager.getResidentByOpenid(openid)

		if (userData) {
			userRole.isResident = userData.apply_status === 'trusted'
			userRole.isSuperAdmin = userData.is_super_admin || false
			console.log('用户身份:', userRole)
		} else {
			userRole.isResident = false
			userRole.isSuperAdmin = false
			console.log('用户不是住户')
		}
	} catch (error) {
		console.error('检查用户身份失败:', error)
		userRole.isResident = false
		userRole.isSuperAdmin = false
	}
}

// 生命周期
onMounted(async () => {
	try {
		// 初始化数据管理器（加载residents数据到缓存），传入uniCloud实例
		console.log('初始化数据管理器...')
		await dataManager.init(uniCloud)

		// 检查用户身份
		console.log('检查用户身份...')
		await checkUserRole()

		console.log('页面初始化完成')
	} catch (error) {
		console.error('页面初始化失败:', error)
		uni.showToast({
			title: '初始化失败',
			icon: 'none'
		})
	}
})
</script>

<style>
.container {
	height: 100%;
	background-color: #f0f0f0;
	position: relative;
	overflow: hidden;
	display: flex;
}

.main-content {
	display: flex;
	flex-direction: row;
	align-items: center;
	overflow: hidden;
	flex: 1;
}
.opr-area {
	width: 100%;
	height: 220rpx;
	background: transparent;
	border-top: 2rpx solid #e9ecef;
	box-shadow: 0 -4rpx 12rpx rgba(0, 0, 0, 0.08);
	display: flex;
	align-items: center;
	justify-content: center;
	padding: 20rpx 20rpx 40rpx 20rpx;
	box-sizing: border-box;
}

.button-container {
	display: flex;
	flex-direction: row;
	align-items: center;
	gap: 20rpx;
	width: 100%;
	max-width: 750rpx;
}

.left-area {
	flex: 1;
	display: flex;
	flex-direction: column;
	gap: 20rpx;
}

.action-button {
	display: flex;
	align-items: center;
	justify-content: center;
	border-radius: 40rpx;
	transition: all 0.3s ease;
	cursor: pointer;
	padding: 15rpx 15rpx;
	box-sizing: border-box;
	box-shadow: 0 8rpx 24rpx rgba(0, 0, 0, 0.12);
}

.action-button:active {
	transform: scale(0.98);
	box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.15);
}

/* Audit按钮 - 白色背景淡灰色边框 */
.audit-button {
	background: #ffffff;
	border: 2rpx solid #e9ecef;
	min-height: 50rpx;
	border-radius: 20rpx;
	box-shadow: 0 4rpx 16rpx rgba(0, 0, 0, 0.08);
}

/* 第一个Audit按钮 - 深红色渐变 */
.audit-button-red {
	background: linear-gradient(135deg, #e5cd14, #ee9568);
	border: none;
}

/* 入住按钮 - 占4份，绿色渐变 */
.checkin-button {
	border-radius: 100rpx;
	flex: 4;
	background: linear-gradient(135deg, #00F260, #0575E6);
	min-height: 140rpx;
	box-shadow:
		5rpx 8rpx 8rpx rgba(0, 0, 0, 0.16),
		2rpx 3rpx 6rpx rgba(0, 0, 0, 0.1);
}

.button-icon {
	font-size: 36rpx;
	color: #ffffff;
	margin-right: 16rpx;
}

.button-content {
	display: inline;
	width: 100%;
	text-align: center;
}

.button-text {
	font-size: 48rpx;
	font-weight: 600;
	color: #ffffff;
}

.button-exclamation {
	font-weight: 900;
	font-style: italic;
	margin-left: 8rpx;
}

.button-label {
	font-size: 24rpx;
	color: rgba(255, 255, 255, 0.9);
	margin-top: 4rpx;
}

.action-button image {
	width: 40rpx;
	height: 40rpx;
	filter: drop-shadow(2rpx 2rpx 20rpx yellow);
}


</style>