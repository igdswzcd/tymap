<template>
	<view class="container">
		<!-- 栋信息头部 -->
		<view class="building-header">
			<view class="building-title">
				<text class="building-name">{{buildingName}}</text>
				<text :class="['building-type', buildingType]">
					{{buildingType === 'flat' ? '平层' : '别墅'}}
				</text>
			</view>
			<view class="building-stats">
				<text class="stat-item">总住户: {{residentCount}}</text>
			</view>
		</view>

		<!-- 楼层选择 -->
		<view class="floor-section">
			<scroll-view 
				class="floor-scroll" 
				scroll-x 
				:show-scrollbar="false"
			>
				<view class="floor-list">
					<view 
						:class="['floor-item', selectedFloor === floor ? 'active' : '']"
						v-for="floor in floors" 
						:key="floor"
						@tap="selectFloor(floor)"
					>
						<text class="floor-number">{{floor}}层</text>
						<text class="floor-residents">{{getFloorResidents(floor)}}户</text>
					</view>
				</view>
			</scroll-view>
		</view>

		<!-- 单元列表 -->
		<view class="units-section">
			<view class="section-title">
				{{selectedFloor}}层单元
			</view>
			<view class="units-grid">
				<view 
					class="unit-card" 
					v-for="unit in floorUnits" 
					:key="unit.name"
					@tap="goToUnit(unit)"
				>
					<view class="unit-header">
						<text class="unit-name">{{unit.name}}</text>
						<text :class="['unit-status', getUnitStatus(unit)]">
							{{getUnitStatus(unit) === 'occupied' ? '已入住' : '空置'}}
						</text>
					</view>
					<view class="unit-info">
						<text class="unit-location">{{unit.unit}}单元 {{unit.floor}}层 {{unit.door}}号</text>
					</view>
					<view class="unit-residents" v-if="getUnitResidents(unit).length > 0">
						<view 
							class="resident-avatar" 
							v-for="resident in getUnitResidents(unit).slice(0, 2)" 
							:key="resident._id"
						>
							<image 
								class="avatar" 
								:src="resident.avatar || '/static/default-avatar.png'" 
								mode="aspectFill"
							></image>
						</view>
						<text class="more-count" v-if="getUnitResidents(unit).length > 2">
							+{{getUnitResidents(unit).length - 2}}
						</text>
					</view>
				</view>
			</view>
		</view>

		<!-- 返回按钮 -->
		<view class="action-section">
			<view class="action-button" @tap="goBack">
				<text class="action-text">返回</text>
			</view>
		</view>
	</view>
</template>

<script lang="ts">
import { defineComponent, ref, reactive, onMounted, computed } from 'vue'
import { onLoad, onShow } from '@dcloudio/uni-app'
import { initializeMockData } from '@/utils/mockData'

interface Unit {
	name: string
	unit: number
	floor: number
	door: number
}

interface Resident {
	_id: string
	nickname: string
	avatar?: string
	credit_level: number
	building: number
	unit: number
	floor: number
	door: number
}

export default defineComponent({
	name: 'BuildingPage',
	setup() {
		const building = ref(0)
		const buildingName = ref('')
		const buildingType = ref<'flat' | 'villa'>('flat')
		const floors = ref<number[]>([])
		const units = ref<Unit[]>([])
		const residents = ref<Resident[]>([])
		const selectedFloor = ref(0)
		const currentFloorIndex = ref(0)

		// 计算属性
		const residentCount = computed(() => residents.value.length)
		const floorUnits = computed(() => {
			return units.value.filter(unit => unit.floor === selectedFloor.value)
		})

		// 加载栋数据
		const loadBuildingData = async () => {
			try {
				const db = uniCloud.databaseForJQL()
				
				// 获取单元数据
				const unitsRes = await db.collection('units')
					.where({
						building: building.value
					})
					.orderBy('unit', 'asc')
					.orderBy('floor', 'asc')
					.orderBy('door', 'asc')
					.get()
				
				if (unitsRes.data.length > 0) {
					units.value = unitsRes.data as Unit[]
					floors.value = Array.from(new Set(units.value.map(u => u.floor))).sort()
				} else {
					// 如果没有单元数据，使用Mock数据
					if (buildingType.value === 'flat') {
						floors.value = Array.from({length: 17}, (_, i) => i + 1)
						units.value = []
						
						// 生成平层单元数据
						for (let unit = 1; unit <= 4; unit++) {
							for (const floor of floors.value) {
								for (let door = 1; door <= 2; door++) {
									units.value.push({
										name: `${floor}${door === 1 ? '01' : '02'}`,
										unit: unit,
										floor: floor,
										door: door
									})
								}
							}
						}
					} else {
						floors.value = [1, 3, 5]
						units.value = []
						
						// 生成别墅单元数据
						for (const floor of floors.value) {
							units.value.push({
								name: `${floor}号别墅`,
								unit: 1,
								floor: floor,
								door: 1
							})
						}
					}
				}
				
				selectedFloor.value = floors.value[0]
				
				// 获取住户数据
				const residentsRes = await db.collection('residents')
					.where({
						building: building.value
					})
					.get()
				
				residents.value = residentsRes.data as Resident[]
				
			} catch (error) {
				console.error('加载栋数据失败:', error)
				uni.showToast({
					title: '加载失败',
					icon: 'none'
				})
			}
		}

		// 选择楼层
		const selectFloor = (floor: number) => {
			selectedFloor.value = floor
			currentFloorIndex.value = floors.value.indexOf(floor)
		}

		// 获取楼层住户数量
		const getFloorResidents = (floor: number): number => {
			return residents.value.filter(resident => resident.floor === floor).length
		}

		// 获取单元住户
		const getUnitResidents = (unit: Unit): Resident[] => {
			return residents.value.filter(resident => 
				resident.unit === unit.unit && 
				resident.floor === unit.floor && 
				resident.door === unit.door
			)
		}

		// 获取单元状态
		const getUnitStatus = (unit: Unit): string => {
			const residents = getUnitResidents(unit)
			return residents.length > 0 ? 'occupied' : 'empty'
		}

		// 跳转到单元详情
		const goToUnit = (unit: Unit) => {
			uni.navigateTo({
				url: `/pages/unit/unit?building=${building.value}&name=${buildingName.value}&type=${buildingType.value}&unit=${unit.unit}&floor=${unit.floor}`
			})
		}

		// 返回
		const goBack = () => {
			uni.navigateBack()
		}

		// 页面加载
		onLoad(async (options) => {
			building.value = parseInt(options.building || '0')
			buildingName.value = options.name || ''
			buildingType.value = options.type || 'flat'
			
			await initializeMockData()
			loadBuildingData()
		})

		return {
			building,
			buildingName,
			buildingType,
			floors,
			units,
			residents,
			selectedFloor,
			currentFloorIndex,
			residentCount,
			floorUnits,
			selectFloor,
			getFloorResidents,
			getUnitResidents,
			getUnitStatus,
			goToUnit,
			goBack
		}
	}
})
</script>

<style>
.container {
	padding: 20rpx;
	background-color: #f5f5f5;
	min-height: 100vh;
}

.building-header {
	background: white;
	border-radius: 15rpx;
	padding: 30rpx;
	margin-bottom: 30rpx;
	box-shadow: 0 2rpx 10rpx rgba(0,0,0,0.1);
}

.building-title {
	display: flex;
	justify-content: space-between;
	align-items: center;
	margin-bottom: 20rpx;
}

.building-name {
	font-size: 36rpx;
	font-weight: bold;
	color: #333;
}

.building-type {
	font-size: 24rpx;
	padding: 8rpx 16rpx;
	border-radius: 12rpx;
}

.building-type.flat {
	background: #e3f2fd;
	color: #1976d2;
}

.building-type.villa {
	background: #f3e5f5;
	color: #7b1fa2;
}

.building-stats {
	display: flex;
	justify-content: space-between;
	align-items: center;
}

.stat-item {
	font-size: 24rpx;
	color: #666;
	background: #f5f5f5;
	padding: 10rpx 20rpx;
	border-radius: 20rpx;
}

.floor-section {
	margin-bottom: 30rpx;
}

.floor-scroll {
	white-space: nowrap;
}

.floor-list {
	display: flex;
	padding: 10rpx 0;
}

.floor-item {
	flex-shrink: 0;
	width: 120rpx;
	height: 120rpx;
	background: white;
	border-radius: 15rpx;
	margin-right: 20rpx;
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	box-shadow: 0 2rpx 10rpx rgba(0,0,0,0.1);
}

.floor-item.active {
	background: #2196f3;
}

.floor-item.active .floor-number,
.floor-item.active .floor-residents {
	color: white;
}

.floor-number {
	font-size: 28rpx;
	font-weight: bold;
	color: #333;
	margin-bottom: 10rpx;
}

.floor-residents {
	font-size: 20rpx;
	color: #666;
}

.units-section {
	margin-bottom: 30rpx;
}

.section-title {
	font-size: 32rpx;
	font-weight: bold;
	margin-bottom: 20rpx;
	color: #333;
}

.units-grid {
	display: grid;
	grid-template-columns: repeat(2, 1fr);
	gap: 20rpx;
}

.unit-card {
	background: white;
	border-radius: 15rpx;
	padding: 30rpx;
	box-shadow: 0 2rpx 10rpx rgba(0,0,0,0.1);
}

.unit-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	margin-bottom: 20rpx;
}

.unit-name {
	font-size: 32rpx;
	font-weight: bold;
	color: #333;
}

.unit-status {
	font-size: 20rpx;
	padding: 5rpx 10rpx;
	border-radius: 10rpx;
}

.unit-status.occupied {
	background: #e8f5e8;
	color: #4caf50;
}

.unit-status.empty {
	background: #ffeaa7;
	color: #f39c12;
}

.unit-info {
	margin-bottom: 20rpx;
}

.unit-location {
	font-size: 24rpx;
	color: #666;
}

.unit-residents {
	display: flex;
	align-items: center;
}

.resident-avatar {
	margin-right: 10rpx;
}

.avatar {
	width: 40rpx;
	height: 40rpx;
	border-radius: 20rpx;
}

.more-count {
	font-size: 20rpx;
	color: #666;
	margin-left: 5rpx;
}

.action-section {
	margin-top: 40rpx;
}

.action-button {
	background: #2196f3;
	border-radius: 25rpx;
	padding: 20rpx;
	text-align: center;
}

.action-text {
	color: white;
	font-size: 28rpx;
	font-weight: bold;
}
</style>