<template>
	<view class="container">
		<!-- 搜索框 -->
		<view class="search-section">
			<view class="search-box">
				<input 
					class="search-input"
					type="text"
					v-model="searchKeyword"
					placeholder="搜索住户姓名、手机号、栋/单元/楼层/门号"
					@input="onSearchInput"
					@confirm="performSearch"
				/>
				<view class="search-icon" @tap="performSearch">🔍</view>
			</view>
			
			<!-- 搜索类型筛选 -->
			<view class="filter-section">
				<view 
					:class="['filter-item', searchType === 'all' ? 'active' : '']"
					@tap="setSearchType('all')"
				>
					全部
				</view>
				<view 
					:class="['filter-item', searchType === 'name' ? 'active' : '']"
					@tap="setSearchType('name')"
				>
					姓名
				</view>
				<view 
					:class="['filter-item', searchType === 'phone' ? 'active' : '']"
					@tap="setSearchType('phone')"
				>
					手机号
				</view>
				<view 
					:class="['filter-item', searchType === 'location' ? 'active' : '']"
					@tap="setSearchType('location')"
				>
					位置
				</view>
			</view>
		</view>

		<!-- 搜索历史 -->
		<view class="history-section" v-if="searchHistory.length > 0 && searchKeyword === ''">
			<view class="section-header">
				<text class="section-title">搜索历史</text>
				<text class="clear-btn" @tap="clearHistory">清空</text>
			</view>
			<view class="history-list">
				<view 
					class="history-item"
					v-for="item in searchHistory"
					:key="item"
					@tap="useHistory(item)"
				>
					{{item}}
				</view>
			</view>
		</view>

		<!-- 搜索结果 -->
		<view class="results-section" v-if="searchResults.length > 0">
			<view class="section-header">
				<text class="section-title">搜索结果 ({{searchResults.length}})</text>
			</view>
			<view class="results-list">
				<view 
					class="result-item"
					v-for="resident in searchResults"
					:key="resident._id"
					@tap="goToResident(resident)"
				>
					<view class="result-header">
						<image class="avatar" :src="resident.avatar || '/static/default-avatar.png'" mode="aspectFill"></image>
						<view class="resident-info">
							<text class="resident-name">{{resident.nickname}}</text>
							<text class="resident-phone">{{resident.phone || '未登记手机号'}}</text>
						</view>
						<text :class="['credit-level', 'level-' + resident.credit_level]">
							{{resident.credit_level}}级
						</text>
					</view>
					<view class="location-info">
						{{resident.building}}栋 {{resident.unit}}单元 {{resident.floor}}层 {{resident.door}}号
					</view>
					<view class="tags-section">
						<text class="tag" v-if="resident.is_super_admin">超级管理员</text>
						<text class="tag" v-if="resident.is_unit_admin">单元管理员</text>
						<text class="tag" v-if="resident.is_family_owner">家庭户主</text>
						<text class="tag">{{getOwnerTypeText(resident.owner_type)}}</text>
					</view>
				</view>
			</view>
		</view>

		<!-- 无结果提示 -->
		<view class="no-results" v-if="searchKeyword && searchResults.length === 0">
			<text class="no-results-icon">🔍</text>
			<text class="no-results-text">未找到相关住户信息</text>
			<text class="no-results-tip">请尝试使用其他关键词搜索</text>
		</view>

		<!-- 返回按钮 -->
		<view class="action-section">
			<view class="action-button" @tap="goBack">
				<text class="action-text">返回</text>
			</view>
		</view>
	</view>
</template>

<script lang="ts">
import { defineComponent, ref, reactive, onMounted } from 'vue'
import { onLoad } from '@dcloudio/uni-app'
import { initializeMockData } from '@/utils/mockData'

interface Resident {
	_id: string
	nickname: string
	avatar?: string
	phone?: string
	credit_level: number
	building: number
	unit: number
	floor: number
	door: number
	is_super_admin: boolean
	is_unit_admin: boolean
	is_family_owner: boolean
	owner_type: string
}

export default defineComponent({
	name: 'SearchPage',
	setup() {
		const searchKeyword = ref('')
		const searchType = ref<'all' | 'name' | 'phone' | 'location'>('all')
		const searchResults = ref<Resident[]>([])
		const searchHistory = ref<string[]>([])
		const isLoading = ref(false)

		// 搜索输入防抖
		let searchTimer: any = null

		// 初始化搜索历史
		const initSearchHistory = () => {
			try {
				const history = uni.getStorageSync('searchHistory')
				if (history) {
					searchHistory.value = JSON.parse(history)
				}
			} catch (error) {
				console.error('读取搜索历史失败:', error)
			}
		}

		// 保存搜索历史
		const saveSearchHistory = (keyword: string) => {
			if (!keyword.trim()) return
			
			// 移除重复项
			searchHistory.value = searchHistory.value.filter(item => item !== keyword)
			
			// 添加到开头
			searchHistory.value.unshift(keyword)
			
			// 限制最多保存20条
			if (searchHistory.value.length > 20) {
				searchHistory.value = searchHistory.value.slice(0, 20)
			}
			
			// 保存到本地存储
			try {
				uni.setStorageSync('searchHistory', JSON.stringify(searchHistory.value))
			} catch (error) {
				console.error('保存搜索历史失败:', error)
			}
		}

		// 清空搜索历史
		const clearHistory = () => {
			uni.showModal({
				title: '确认清空',
				content: '确定要清空所有搜索历史吗？',
				success: (res) => {
					if (res.confirm) {
						searchHistory.value = []
						try {
							uni.removeStorageSync('searchHistory')
							uni.showToast({ title: '已清空', icon: 'success' })
						} catch (error) {
							console.error('清空搜索历史失败:', error)
						}
					}
				}
			})
		}

		// 使用搜索历史
		const useHistory = (keyword: string) => {
			searchKeyword.value = keyword
			performSearch()
		}

		// 设置搜索类型
		const setSearchType = (type: 'all' | 'name' | 'phone' | 'location') => {
			searchType.value = type
			if (searchKeyword.value) {
				performSearch()
			}
		}

		// 搜索输入处理
		const onSearchInput = () => {
			if (searchTimer) {
				clearTimeout(searchTimer)
			}
			
			searchTimer = setTimeout(() => {
				if (searchKeyword.value.length > 0) {
					performSearch()
				} else {
					searchResults.value = []
				}
			}, 500)
		}

		// 执行搜索
		const performSearch = async () => {
			const keyword = searchKeyword.value.trim()
			if (!keyword) {
				searchResults.value = []
				return
			}

			isLoading.value = true
			
			try {
				const db = uniCloud.databaseForJQL()
				let query = db.collection('residents')
				
				// 根据搜索类型构建查询条件
				if (searchType.value === 'all') {
					// 全局搜索：姓名、手机号、位置信息
					query = query.where({
						$or: [
							{ nickname: new RegExp(keyword, 'i') },
							{ phone: new RegExp(keyword, 'i') },
							{ building: parseInt(keyword) || 0 },
							{ unit: parseInt(keyword) || 0 },
							{ floor: parseInt(keyword) || 0 },
							{ door: parseInt(keyword) || 0 }
						]
					})
				} else if (searchType.value === 'name') {
					// 按姓名搜索
					query = query.where({
						nickname: new RegExp(keyword, 'i')
					})
				} else if (searchType.value === 'phone') {
					// 按手机号搜索
					query = query.where({
						phone: new RegExp(keyword, 'i')
					})
				} else if (searchType.value === 'location') {
					// 按位置搜索
					const buildingMatch = keyword.match(/(\d+)栋/)
					const unitMatch = keyword.match(/(\d+)单元/)
					const floorMatch = keyword.match(/(\d+)层/)
					const doorMatch = keyword.match(/(\d+)号/)
					
					const conditions = []
					
					if (buildingMatch) {
						conditions.push({ building: parseInt(buildingMatch[1]) })
					}
					if (unitMatch) {
						conditions.push({ unit: parseInt(unitMatch[1]) })
					}
					if (floorMatch) {
						conditions.push({ floor: parseInt(floorMatch[1]) })
					}
					if (doorMatch) {
						conditions.push({ door: parseInt(doorMatch[1]) })
					}
					
					// 如果没有匹配到格式，尝试直接搜索数字
					if (conditions.length === 0) {
						const num = parseInt(keyword)
						if (!isNaN(num)) {
							conditions.push(
								{ building: num },
								{ unit: num },
								{ floor: num },
								{ door: num }
							)
						}
					}
					
					if (conditions.length > 0) {
						query = query.where({
							$or: conditions
						})
					}
				}
				
				const res = await query.get()
				searchResults.value = res.data as Resident[]
				
				// 保存搜索历史
				saveSearchHistory(keyword)
				
			} catch (error) {
				console.error('搜索失败:', error)
				uni.showToast({
					title: '搜索失败',
					icon: 'none'
				})
			} finally {
				isLoading.value = false
			}
		}

		// 获取户主类型文本
		const getOwnerTypeText = (type: string): string => {
			switch (type) {
				case 'owner': return '业主'
				case 'tenant': return '租客'
				case 'family': return '家人'
				default: return '未知'
			}
		}

		// 跳转到住户详情
		const goToResident = (resident: Resident) => {
			uni.navigateTo({
				url: `/pages/resident/resident?id=${resident._id}&building=${resident.building}&unit=${resident.unit}&floor=${resident.floor}&door=${resident.door}`
			})
		}

		// 返回
		const goBack = () => {
			uni.navigateBack()
		}

		// 页面加载
		onLoad(async () => {
			await initializeMockData()
			initSearchHistory()
		})

		return {
			searchKeyword,
			searchType,
			searchResults,
			searchHistory,
			isLoading,
			setSearchType,
			onSearchInput,
			performSearch,
			useHistory,
			clearHistory,
			getOwnerTypeText,
			goToResident,
			goBack
		}
	}
})
</script>

<style>
.container {
	padding: 20rpx;
	background-color: #f5f5f5;
	min-height: 100vh;
}

.search-section {
	margin-bottom: 30rpx;
}

.search-box {
	background: white;
	border-radius: 25rpx;
	padding: 20rpx 30rpx;
	display: flex;
	align-items: center;
	box-shadow: 0 2rpx 10rpx rgba(0,0,0,0.1);
	margin-bottom: 20rpx;
}

.search-input {
	flex: 1;
	font-size: 28rpx;
	border: none;
	outline: none;
}

.search-icon {
	font-size: 32rpx;
	margin-left: 20rpx;
	padding: 10rpx;
}

.filter-section {
	display: flex;
	justify-content: space-between;
	align-items: center;
}

.filter-item {
	background: white;
	border-radius: 20rpx;
	padding: 15rpx 30rpx;
	font-size: 24rpx;
	color: #666;
	box-shadow: 0 2rpx 10rpx rgba(0,0,0,0.1);
}

.filter-item.active {
	background: #2196f3;
	color: white;
}

.history-section {
	margin-bottom: 30rpx;
}

.section-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	margin-bottom: 20rpx;
}

.section-title {
	font-size: 32rpx;
	font-weight: bold;
	color: #333;
}

.clear-btn {
	font-size: 24rpx;
	color: #999;
}

.history-list {
	display: flex;
	flex-wrap: wrap;
	gap: 15rpx;
}

.history-item {
	background: white;
	border-radius: 15rpx;
	padding: 10rpx 20rpx;
	font-size: 24rpx;
	color: #666;
	box-shadow: 0 2rpx 10rpx rgba(0,0,0,0.1);
}

.results-section {
	margin-bottom: 30rpx;
}

.results-list {
	display: flex;
	flex-direction: column;
	gap: 20rpx;
}

.result-item {
	background: white;
	border-radius: 15rpx;
	padding: 30rpx;
	box-shadow: 0 2rpx 10rpx rgba(0,0,0,0.1);
}

.result-header {
	display: flex;
	align-items: center;
	margin-bottom: 20rpx;
}

.avatar {
	width: 80rpx;
	height: 80rpx;
	border-radius: 40rpx;
	margin-right: 20rpx;
}

.resident-info {
	flex: 1;
}

.resident-name {
	display: block;
	font-size: 32rpx;
	font-weight: bold;
	color: #333;
	margin-bottom: 5rpx;
}

.resident-phone {
	display: block;
	font-size: 24rpx;
	color: #666;
}

.credit-level {
	font-size: 20rpx;
	padding: 5rpx 10rpx;
	border-radius: 10rpx;
	text-align: center;
	color: white;
}

.credit-level.level-0 {
	background: #f39c12;
}

.credit-level.level-1 {
	background: #27ae60;
}

.credit-level.level-2 {
	background: #0984e3;
}

.location-info {
	font-size: 24rpx;
	color: #666;
	margin-bottom: 15rpx;
}

.tags-section {
	display: flex;
	flex-wrap: wrap;
	gap: 10rpx;
}

.tag {
	background: #e3f2fd;
	color: #1976d2;
	font-size: 20rpx;
	padding: 5rpx 10rpx;
	border-radius: 10rpx;
}

.no-results {
	text-align: center;
	padding: 100rpx 0;
}

.no-results-icon {
	font-size: 100rpx;
	color: #ccc;
	display: block;
	margin-bottom: 20rpx;
}

.no-results-text {
	display: block;
	font-size: 32rpx;
	color: #999;
	margin-bottom: 10rpx;
}

.no-results-tip {
	font-size: 24rpx;
	color: #ccc;
}

.action-section {
	margin-top: 40rpx;
}

.action-button {
	background: #2196f3;
	border-radius: 25rpx;
	padding: 20rpx;
	text-align: center;
}

.action-text {
	color: white;
	font-size: 28rpx;
	font-weight: bold;
}
</style>