// 生成合理的测试住户数据，分散到各单元各楼层
export async function insertMultipleTestResidents() {
	const db = uniCloud.databaseForJQL()

	// 首先清空现有数据（避免重复插入）
	try {
		await db.collection('residents').where('/^openid_/.test(openid)').remove()
		console.log('清空现有测试数据成功')
	} catch (error) {
		console.log('清空数据失败或无数据:', (error as any).message)
	}

	const testResidents: any[] = []
	const names = ['张', '李', '王', '赵', '刘', '陈', '杨', '黄', '周', '吴', '徐', '孙', '马', '朱', '胡', '林', '何', '高', '梁', '郑', '罗', '宋', '谢', '唐', '韩', '曹', '许', '邓', '萧', '冯']
	const givenNames = ['伟', '芳', '娜', '秀英', '敏', '静', '丽', '强', '磊', '军', '洋', '勇', '艳', '杰', '娟', '涛', '明', '超', '秀兰', '霞', '平', '刚', '桂英', '玉兰', '萍', '毅', '浩', '宇', '轩', '梓', '俊']

	// 栋1: 3个单元，每个单元6层，每层2户，假设50%入住率
	const building1Residents: any[] = []
	for (let unit = 1; unit <= 3; unit++) {
		for (let floor = 1; floor <= 6; floor++) {
			for (let door = 1; door <= 2; door++) {
				if (Math.random() > 0.5) { // 50%入住率
					const nameIndex = Math.floor(Math.random() * names.length)
					const givenNameIndex = Math.floor(Math.random() * givenNames.length)
					const name = names[nameIndex] + givenNames[givenNameIndex]

					building1Residents.push({
						building: 1,
						unit: unit,
						floor: floor,
						door: door,
						nickname: name,
						phone: '1380013' + String(1000 + building1Residents.length).padStart(4, '0'),
						openid: 'openid_1_' + (unit * 100 + floor * 10 + door),
						apply_status: 'trusted',
						is_super_admin: false,
						is_unit_admin: unit === 1 && floor === 1 && door === 1,
						is_family_owner: Math.random() > 0.3,
						owner_type: Math.random() > 0.3 ? 'owner' : 'tenant'
					})
				}
			}
		}
	}

	// 栋2: 4个单元，每个单元8层，每层2户，100%入住率（每户一人）
	const building2Residents: any[] = []
	for (let unit = 1; unit <= 4; unit++) {
		for (let floor = 1; floor <= 8; floor++) {
			for (let door = 1; door <= 2; door++) {
				const nameIndex = Math.floor(Math.random() * names.length)
				const givenNameIndex = Math.floor(Math.random() * givenNames.length)
				const name = names[nameIndex] + givenNames[givenNameIndex]

				building2Residents.push({
					building: 2,
					unit: unit,
					floor: floor,
					door: door,
					nickname: name,
					phone: '1380014' + String(1000 + building2Residents.length).padStart(4, '0'),
					openid: 'openid_2_' + (unit * 100 + floor * 10 + door),
					apply_status: 'trusted',
					is_super_admin: false,
					is_unit_admin: unit === 37 && floor === 1 && door === 1,
					is_family_owner: Math.random() > 0.3,
					owner_type: Math.random() > 0.3 ? 'owner' : 'tenant'
				})
			}
		}
	}

	// 栋3: 2个单元，每个单元5层，每层2户，假设80%入住率
	const building3Residents: any[] = []
	for (let unit = 1; unit <= 2; unit++) {
		for (let floor = 1; floor <= 5; floor++) {
			for (let door = 1; door <= 2; door++) {
				if (Math.random() > 0.2) { // 80%入住率
					const nameIndex = Math.floor(Math.random() * names.length)
					const givenNameIndex = Math.floor(Math.random() * givenNames.length)
					const name = names[nameIndex] + givenNames[givenNameIndex]

					building3Residents.push({
						building: 3,
						unit: unit,
						floor: floor,
						door: door,
						nickname: name,
						phone: '1380015' + String(1000 + building3Residents.length).padStart(4, '0'),
						openid: 'openid_3_' + (unit * 100 + floor * 10 + door),
						apply_status: 'trusted',
						is_super_admin: false,
						is_unit_admin: unit === 24 && floor === 1 && door === 1,
						is_family_owner: Math.random() > 0.3,
						owner_type: Math.random() > 0.3 ? 'owner' : 'tenant'
					})
				}
			}
		}
	}

	// 栋4: 2个单元，每个单元4层，每层2户，假设30%入住率
	const building4Residents: any[] = []
	for (let unit = 1; unit <= 2; unit++) {
		for (let floor = 1; floor <= 4; floor++) {
			for (let door = 1; door <= 2; door++) {
				if (Math.random() > 0.7) { // 30%入住率
					const nameIndex = Math.floor(Math.random() * names.length)
					const givenNameIndex = Math.floor(Math.random() * givenNames.length)
					const name = names[nameIndex] + givenNames[givenNameIndex]

					building4Residents.push({
						building: 4,
						unit: unit,
						floor: floor,
						door: door,
						nickname: name,
						phone: '1380016' + String(1000 + building4Residents.length).padStart(4, '0'),
						openid: 'openid_4_' + (unit * 100 + floor * 10 + door),
						apply_status: 'trusted',
						is_super_admin: false,
						is_unit_admin: unit === 1 && floor === 1 && door === 1,
						is_family_owner: Math.random() > 0.3,
						owner_type: Math.random() > 0.3 ? 'owner' : 'tenant'
					})
				}
			}
		}
	}

	// 栋5: 1个单元，每个单元3层，每层2户，假设20%入住率
	const building5Residents: any[] = []
	for (let unit = 1; unit <= 1; unit++) {
		for (let floor = 1; floor <= 3; floor++) {
			for (let door = 1; door <= 2; door++) {
				if (Math.random() > 0.8) { // 20%入住率
					const nameIndex = Math.floor(Math.random() * names.length)
					const givenNameIndex = Math.floor(Math.random() * givenNames.length)
					const name = names[nameIndex] + givenNames[givenNameIndex]

					building5Residents.push({
						building: 5,
						unit: unit,
						floor: floor,
						door: door,
						nickname: name,
						phone: '1380017' + String(1000 + building5Residents.length).padStart(4, '0'),
						openid: 'openid_5_' + (unit * 100 + floor * 10 + door),
						apply_status: 'trusted',
						is_super_admin: false,
						is_unit_admin: unit === 1 && floor === 1 && door === 1,
						is_family_owner: Math.random() > 0.3,
						owner_type: Math.random() > 0.3 ? 'owner' : 'tenant'
					})
				}
			}
		}
	}

	testResidents.push(...building1Residents, ...building2Residents, ...building3Residents, ...building4Residents, ...building5Residents)

	try {
		// 使用JQL批量插入，直接传递数组
		const result = await db.collection('residents').add(testResidents)
		console.log('批量插入测试住户成功:', result)
		console.log('各栋楼住户数量统计:', {
			1: building1Residents.length,
			2: building2Residents.length,
			3: building3Residents.length,
			4: building4Residents.length,
			5: building5Residents.length
		})
		return result
	} catch (error) {
		console.error('批量插入测试住户失败:', error)
		throw error
	}
}

// 插入单个测试住户
export async function insertTestResident() {
	const db = uniCloud.databaseForJQL()

	try {
		const testResident = {
			building: 2,
			unit: 37,
			floor: 1,
			door: 1,
			nickname: '测试用户',
			phone: '13800138000',
			openid: 'test_openid_001',
			apply_status: 'trusted',
			is_super_admin: true,
			is_unit_admin: true,
			is_family_owner: true,
			owner_type: 'owner'
		}

		// 按照JQL文档，直接传入对象，无需类型转换
		const result = await db.collection('residents').add(testResident)
		console.log('插入测试住户成功:', result)
		return result
	} catch (error) {
		console.error('插入测试住户失败:', error)
		throw error
	}
}

// 获取用户OpenID
export async function getUserOpenid() {
	return new Promise((resolve, reject) => {
		// #ifdef MP-WEIXIN
		uni.login({
			provider: 'weixin',
			success: (loginRes) => {
				resolve(loginRes.code)
			},
			fail: (error) => {
				reject(error)
			}
		})
		// #endif

		// #ifndef MP-WEIXIN
		resolve('test_openid_001') // 使用测试用户
		// #endif
	})
}