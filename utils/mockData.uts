// 插入多个测试住户
export async function insertMultipleTestResidents() {
	const db = uniCloud.databaseForJQL()

	const testResidents = [
		// 栋1住户
		{ building: 1, unit: 37, floor: 1, door: 1, nickname: '张三', phone: '13800138001', openid: 'openid_1_1', credit_level: 1, is_super_admin: false, is_unit_admin: false, is_family_owner: true, owner_type: 'owner' },
		{ building: 1, unit: 37, floor: 1, door: 2, nickname: '李四', phone: '13800138002', openid: 'openid_1_2', credit_level: 2, is_super_admin: false, is_unit_admin: false, is_family_owner: true, owner_type: 'owner' },
		{ building: 1, unit: 37, floor: 2, door: 1, nickname: '王五', phone: '13800138003', openid: 'openid_1_3', credit_level: 1, is_super_admin: false, is_unit_admin: false, is_family_owner: false, owner_type: 'tenant' },
		{ building: 1, unit: 37, floor: 2, door: 2, nickname: '赵六', phone: '13800138004', openid: 'openid_1_4', credit_level: 1, is_super_admin: false, is_unit_admin: false, is_family_owner: true, owner_type: 'owner' },
		{ building: 1, unit: 37, floor: 3, door: 1, nickname: '钱七', phone: '13800138005', openid: 'openid_1_5', credit_level: 2, is_super_admin: false, is_unit_admin: false, is_family_owner: false, owner_type: 'tenant' },

		// 栋2住户
		{ building: 2, unit: 37, floor: 1, door: 1, nickname: '孙八', phone: '13800138006', openid: 'openid_2_1', credit_level: 1, is_super_admin: false, is_unit_admin: true, is_family_owner: true, owner_type: 'owner' },
		{ building: 2, unit: 37, floor: 1, door: 2, nickname: '周九', phone: '13800138007', openid: 'openid_2_2', credit_level: 2, is_super_admin: false, is_unit_admin: false, is_family_owner: false, owner_type: 'tenant' },
		{ building: 2, unit: 37, floor: 2, door: 1, nickname: '吴十', phone: '13800138008', openid: 'openid_2_3', credit_level: 1, is_super_admin: false, is_unit_admin: false, is_family_owner: true, owner_type: 'owner' },
		{ building: 2, unit: 37, floor: 2, door: 2, nickname: '郑十一', phone: '13800138009', openid: 'openid_2_4', credit_level: 1, is_super_admin: false, is_unit_admin: false, is_family_owner: false, owner_type: 'tenant' },
		{ building: 2, unit: 37, floor: 3, door: 1, nickname: '王十二', phone: '13800138010', openid: 'openid_2_5', credit_level: 2, is_super_admin: false, is_unit_admin: false, is_family_owner: true, owner_type: 'owner' },
		{ building: 2, unit: 37, floor: 3, door: 2, nickname: '李十三', phone: '13800138011', openid: 'openid_2_6', credit_level: 1, is_super_admin: false, is_unit_admin: false, is_family_owner: false, owner_type: 'tenant' },

		// 栋3住户
		{ building: 3, unit: 37, floor: 1, door: 1, nickname: '张十四', phone: '13800138012', openid: 'openid_3_1', credit_level: 2, is_super_admin: false, is_unit_admin: false, is_family_owner: true, owner_type: 'owner' },
		{ building: 3, unit: 37, floor: 1, door: 2, nickname: '刘十五', phone: '13800138013', openid: 'openid_3_2', credit_level: 1, is_super_admin: false, is_unit_admin: false, is_family_owner: false, owner_type: 'tenant' },
		{ building: 3, unit: 37, floor: 2, door: 1, nickname: '陈十六', phone: '13800138014', openid: 'openid_3_3', credit_level: 1, is_super_admin: false, is_unit_admin: false, is_family_owner: true, owner_type: 'owner' },
		{ building: 3, unit: 37, floor: 2, door: 2, nickname: '杨十七', phone: '13800138015', openid: 'openid_3_4', credit_level: 2, is_super_admin: false, is_unit_admin: false, is_family_owner: false, owner_type: 'tenant' },

		// 栋4住户
		{ building: 4, unit: 37, floor: 1, door: 1, nickname: '黄十八', phone: '13800138016', openid: 'openid_4_1', credit_level: 1, is_super_admin: false, is_unit_admin: false, is_family_owner: true, owner_type: 'owner' },
		{ building: 4, unit: 37, floor: 1, door: 2, nickname: '林十九', phone: '13800138017', openid: 'openid_4_2', credit_level: 2, is_super_admin: false, is_unit_admin: false, is_family_owner: false, owner_type: 'tenant' },
		{ building: 4, unit: 37, floor: 2, door: 1, nickname: '徐二十', phone: '13800138018', openid: 'openid_4_3', credit_level: 1, is_super_admin: false, is_unit_admin: false, is_family_owner: true, owner_type: 'owner' },

		// 栋5住户
		{ building: 5, unit: 37, floor: 1, door: 1, nickname: '朱二一', phone: '13800138019', openid: 'openid_5_1', credit_level: 2, is_super_admin: false, is_unit_admin: false, is_family_owner: true, owner_type: 'owner' },
		{ building: 5, unit: 37, floor: 1, door: 2, nickname: '马二二', phone: '13800138020', openid: 'openid_5_2', credit_level: 1, is_super_admin: false, is_unit_admin: false, is_family_owner: false, owner_type: 'tenant' },
	]

	try {
		// 使用JQL批量插入，直接传递数组
		const result = await db.collection('residents').add(testResidents)
		console.log('批量插入测试住户成功:', result)
		return result
	} catch (error) {
		console.error('批量插入测试住户失败:', error)
		throw error
	}
}

// 获取每栋楼的住户数量
export async function getBuildingResidentCounts() {
	const db = uniCloud.databaseForJQL()

	try {
		const result = await db.collection('residents')
			.groupBy('building')
			.groupField('count(*) as residentCount')
			.get()

		const buildingCounts = {}
		result.data.forEach(item => {
			buildingCounts[item.building] = item.residentCount
		})

		console.log('各栋楼住户数量:', buildingCounts)
		return buildingCounts
	} catch (error) {
		console.error('获取各栋楼住户数量失败:', error)
		throw error
	}
}

// 插入单个测试住户
export async function insertTestResident() {
	const db = uniCloud.databaseForJQL()

	try {
		const testResident = {
			building: 2,
			unit: 37,
			floor: 1,
			door: 1,
			nickname: '测试用户',
			phone: '13800138000',
			openid: 'test_openid_001',
			credit_level: 1,
			is_super_admin: true,
			is_unit_admin: true,
			is_family_owner: true,
			owner_type: 'owner'
		}

		// 按照JQL文档，直接传入对象，无需类型转换
		const result = await db.collection('residents').add(testResident)
		console.log('插入测试住户成功:', result)
		return result
	} catch (error) {
		console.error('插入测试住户失败:', error)
		throw error
	}
}

// 读取单个住户
export async function getTestResident() {
	const db = uniCloud.databaseForJQL()

	try {
		const result = await db.collection('residents')
			.where({ openid: 'test_openid_001' })
			.get()

		console.log('读取测试住户:', result)
		return result.data
	} catch (error) {
		console.error('读取测试住户失败:', error)
		throw error
	}
}

// 获取用户OpenID
export async function getUserOpenid() {
	return new Promise((resolve, reject) => {
		// #ifdef MP-WEIXIN
		uni.login({
			provider: 'weixin',
			success: (loginRes) => {
				resolve(loginRes.code)
			},
			fail: (error) => {
				reject(error)
			}
		})
		// #endif

		// #ifndef MP-WEIXIN
		resolve('test_openid_001') // 使用测试用户
		// #endif
	})
}