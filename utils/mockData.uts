// 获取用户openid（测试用）
export function getUserOpenid(): string {
	return ''
}

// 生成合理的测试住户数据，基于buildingManager的配置
export async function insertMultipleTestResidents() {
	const db = uniCloud.databaseForJQL()

	// 检查数据库中现有数据量
	console.log('检查数据库中现有住户数据量...')
	try {
		const checkResult = await db.collection('residents').limit(10000).get()
		const countResult = await db.collection('residents').count()
		const currentCount = countResult.total
		console.log('数据库中现有住户数量:', currentCount)

		// 如果数据量超过200，不执行删除和插入操作
		if (currentCount > 200) {
			console.log('数据库中住户数据量已超过200条，跳过测试数据生成')
			return { skipped: true, reason: '数据量超过200条', currentCount: currentCount }
		}

		// 数据量不超过200，执行清空操作
		console.log('开始清空现有住户数据...')
		await db.collection('residents').remove()
		console.log('清空现有测试数据成功')
	} catch (error) {
		console.log('检查或清空数据时出现错误，但继续执行:', (error as any).message)
	}

	const testResidents: any[] = []
	const names = ['张', '李', '王', '赵', '刘', '陈', '杨', '黄', '周', '吴', '徐', '孙', '马', '朱', '胡', '林', '何', '高', '梁', '郑', '罗', '宋', '谢', '唐', '韩', '曹', '许', '邓', '萧', '冯']
	const givenNames = ['伟', '芳', '娜', '秀英', '敏', '静', '丽', '强', '磊', '军', '洋', '勇', '艳', '杰', '娟', '涛', '明', '超', '秀兰', '霞', '平', '刚', '桂英', '玉兰', '萍', '毅', '浩', '宇', '轩', '梓', '俊']

	// 导入buildingManager获取楼栋配置
	// 注意：由于这是.uts文件，我们不能直接import，所以需要复制buildingManager的配置逻辑
	// 这里我们直接复制buildingManager的配置数据

	const FLAT_BUILDINGS = [
		[1, [], 17, 0],
		[5, [], 16, 0],
		[2, [37, 36], 17, 1],
		[3, [24, 23], 17, 2],
		[4, [9, 8], 17, 3],
		[6, [], 16, 0],
		[10, [], 17, 0],
		[9, [35, 34], 17, 1],
		[8, [22, 21], 16, 2],
		[7, [7, 6], 17, 3]
	]

	const VILLA_BUILDINGS = [
		[11, [], 0],
		[12, [], 1],
		[13, [], 2],
		[14, [28, 27], 3],
		[15, [20, 19], 4],
		[16, [14, 13], 5],
		[17, [5, 4], 6],
		[24, [], 0],
		[23, [], 1],
		[22, [], 2],
		[21, [26, 25], 3],
		[20, [18, 17], 4],
		[19, [12, 11, 10], 5],
		[18, [3, 2, 1], 6]
	]

	// 构建楼栋数据
	const buildingsData = [
		...FLAT_BUILDINGS.map(([building, units, maxFloor, row]) => ({
			building,
			type: 'flat',
			floors: Array.from({ length: maxFloor as number }, (_, i) => i + 1),
			units,
			row,
			isOpen: (units as number[]).length > 0
		})),
		...VILLA_BUILDINGS.map(([building, units, row]) => ({
			building,
			type: 'villa',
			floors: [1, 3, 5], // 别墅固定3层
			units,
			row,
			isOpen: (units as number[]).length > 0
		}))
	]

	console.log('开始生成测试数据，楼栋总数:', buildingsData.length)

	// 只处理启用的楼栋
	const enabledBuildings = buildingsData.filter(b => b.isOpen)
	console.log('启用的楼栋数量:', enabledBuildings.length)

	// 为每个启用的楼栋生成住户数据
	enabledBuildings.forEach(building => {
		const buildingResidents: any[] = []
		const buildingUnits = building.units as number[]
		const buildingFloors = building.floors as number[]

		// 生成随机入住率 (10% ~ 100%)
		const occupancyRate = Math.random() * 0.9 + 0.1
		console.log(`${building.name} 入住率: ${(occupancyRate * 100).toFixed(1)}%`)

		// 计算总的可能住户数量
		const totalPossibleResidents = buildingUnits.length * buildingFloors.length * 2 // 每层2户
		const targetResidentCount = Math.floor(totalPossibleResidents * occupancyRate)

		// 生成所有可能的位置
		const allPositions: any[] = []
		buildingUnits.forEach((unit: number, unitIndex: number) => {
			buildingFloors.forEach((floor: number) => {
				for (let door = 1; door <= 2; door++) {
					allPositions.push({
						unit: unit,
						floor: floor,
						door: door
					})
				}
			})
		})

		// 随机选择位置来放置住户
		const selectedPositions = getRandomSubset(allPositions, targetResidentCount)

		selectedPositions.forEach((position, index) => {
			const nameIndex = Math.floor(Math.random() * names.length)
			const givenNameIndex = Math.floor(Math.random() * givenNames.length)
			const name = names[nameIndex] + givenNames[givenNameIndex]

			// 生成电话号码
			const phonePrefix = ['138', '139', '150', '151', '188', '189'][Math.floor(Math.random() * 6)]
			const phone = phonePrefix + String(10000000 + Math.floor(Math.random() * 90000000))

			buildingResidents.push({
				building: building.building,
				unit: position.unit,
				floor: position.floor,
				door: position.door,
				nickname: name,
				phone: phone,
				openid: `openid_${building.building}_${position.unit}_${position.floor}_${position.door}`,
				apply_status: 'trusted',
				is_super_admin: false,
				is_unit_admin: shouldMakeUnitAdmin(building, position, index),
				is_family_owner: Math.random() > 0.4, // 60%业主，40%家庭成员
				owner_type: Math.random() > 0.3 ? 'owner' : 'tenant' // 70%业主，30%租户
			})
		})

		console.log(`${building.name} 生成住户数量: ${buildingResidents.length}`)
		testResidents.push(...buildingResidents)
	})

	console.log('总共生成住户数量:', testResidents.length)

	// 批量插入数据库
	try {
		console.log('开始批量插入住户数据，数量:', testResidents.length)
		const result = await db.collection('residents').add(testResidents)
		console.log('批量插入测试住户成功:', result)

		// 等待一下确保数据库写入完成
		await new Promise(resolve => setTimeout(resolve, 500))

		// 验证插入结果
		const verifyResult = await db.collection('residents').limit(1000).get()
		console.log('数据库中实际住户数量:', verifyResult.data.length)

		// 统计各栋楼住户数量
		const buildingCounts: any = {}
		testResidents.forEach(resident => {
			buildingCounts[resident.building] = (buildingCounts[resident.building] || 0) + 1
		})
		console.log('生成的各栋楼住户数量统计:', buildingCounts)

		const verifyBuildingCounts: any = {}
		verifyResult.data.forEach((resident: any) => {
			verifyBuildingCounts[resident.building] = (verifyBuildingCounts[resident.building] || 0) + 1
		})
		console.log('数据库中各栋楼住户数量统计:', verifyBuildingCounts)

		return result
	} catch (error) {
		console.error('插入测试住户失败:', error)
		throw error
	}
}

// 辅助函数：从数组中随机选择指定数量的元素
function getRandomSubset<T>(array: T[], count: number): T[] {
	const shuffled = [...array].sort(() => 0.5 - Math.random())
	return shuffled.slice(0, count)
}

// 辅助函数：判断是否应该设置为单元管理员
function shouldMakeUnitAdmin(building: any, position: any, index: number): boolean {
	const buildingUnits = building.units as number[]

	// 每个单元的第一个住户设置为管理员
	if (index === 0) return true

	// 别墅区的第一个住户也设置为管理员
	if (building.type === 'villa' && position.unit === buildingUnits[0] && position.floor === 1 && position.door === 1) {
		return true
	}

	// 其他情况小概率设置为管理员
	return Math.random() < 0.05 // 5%概率
}